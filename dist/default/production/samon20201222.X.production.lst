

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Feb 26 23:30:03 2021

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 1.42
    59                           ; Generated 13/04/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC16F1503 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  0007                     	;# 
   100  0008                     	;# 
   101  0009                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000E                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  008C                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010E                     	;# 
   136  0111                     	;# 
   137  0112                     	;# 
   138  0113                     	;# 
   139  0114                     	;# 
   140  0115                     	;# 
   141  0116                     	;# 
   142  0117                     	;# 
   143  0118                     	;# 
   144  0119                     	;# 
   145  011D                     	;# 
   146  018C                     	;# 
   147  018E                     	;# 
   148  0191                     	;# 
   149  0191                     	;# 
   150  0192                     	;# 
   151  0193                     	;# 
   152  0193                     	;# 
   153  0194                     	;# 
   154  0195                     	;# 
   155  0196                     	;# 
   156  0197                     	;# 
   157  020C                     	;# 
   158  0211                     	;# 
   159  0211                     	;# 
   160  0212                     	;# 
   161  0212                     	;# 
   162  0213                     	;# 
   163  0213                     	;# 
   164  0214                     	;# 
   165  0214                     	;# 
   166  0215                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0216                     	;# 
   170  0216                     	;# 
   171  0217                     	;# 
   172  0217                     	;# 
   173  0391                     	;# 
   174  0392                     	;# 
   175  0393                     	;# 
   176  0498                     	;# 
   177  0498                     	;# 
   178  0499                     	;# 
   179  049A                     	;# 
   180  049B                     	;# 
   181  049B                     	;# 
   182  049C                     	;# 
   183  049D                     	;# 
   184  049E                     	;# 
   185  049F                     	;# 
   186  0611                     	;# 
   187  0612                     	;# 
   188  0613                     	;# 
   189  0613                     	;# 
   190  0614                     	;# 
   191  0615                     	;# 
   192  0616                     	;# 
   193  0616                     	;# 
   194  0617                     	;# 
   195  0618                     	;# 
   196  0619                     	;# 
   197  0619                     	;# 
   198  061A                     	;# 
   199  061B                     	;# 
   200  061C                     	;# 
   201  061C                     	;# 
   202  0691                     	;# 
   203  0692                     	;# 
   204  0693                     	;# 
   205  0694                     	;# 
   206  0695                     	;# 
   207  0F0F                     	;# 
   208  0F10                     	;# 
   209  0F11                     	;# 
   210  0F12                     	;# 
   211  0F13                     	;# 
   212  0F14                     	;# 
   213  0F15                     	;# 
   214  0F16                     	;# 
   215  0F17                     	;# 
   216  0F18                     	;# 
   217  0F19                     	;# 
   218  0F1A                     	;# 
   219  0F1B                     	;# 
   220  0F1C                     	;# 
   221  0F1D                     	;# 
   222  0F1E                     	;# 
   223  0F1F                     	;# 
   224  0FE3                     	;# 
   225  0FE4                     	;# 
   226  0FE5                     	;# 
   227  0FE6                     	;# 
   228  0FE7                     	;# 
   229  0FE8                     	;# 
   230  0FE9                     	;# 
   231  0FEA                     	;# 
   232  0FEB                     	;# 
   233  0FED                     	;# 
   234  0FEE                     	;# 
   235  0FEF                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000E                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0016                     	;# 
   256  0017                     	;# 
   257  0018                     	;# 
   258  0019                     	;# 
   259  001A                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  008C                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0097                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009B                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  010C                     	;# 
   279  010E                     	;# 
   280  0111                     	;# 
   281  0112                     	;# 
   282  0113                     	;# 
   283  0114                     	;# 
   284  0115                     	;# 
   285  0116                     	;# 
   286  0117                     	;# 
   287  0118                     	;# 
   288  0119                     	;# 
   289  011D                     	;# 
   290  018C                     	;# 
   291  018E                     	;# 
   292  0191                     	;# 
   293  0191                     	;# 
   294  0192                     	;# 
   295  0193                     	;# 
   296  0193                     	;# 
   297  0194                     	;# 
   298  0195                     	;# 
   299  0196                     	;# 
   300  0197                     	;# 
   301  020C                     	;# 
   302  0211                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0213                     	;# 
   308  0214                     	;# 
   309  0214                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0215                     	;# 
   313  0216                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0217                     	;# 
   317  0391                     	;# 
   318  0392                     	;# 
   319  0393                     	;# 
   320  0498                     	;# 
   321  0498                     	;# 
   322  0499                     	;# 
   323  049A                     	;# 
   324  049B                     	;# 
   325  049B                     	;# 
   326  049C                     	;# 
   327  049D                     	;# 
   328  049E                     	;# 
   329  049F                     	;# 
   330  0611                     	;# 
   331  0612                     	;# 
   332  0613                     	;# 
   333  0613                     	;# 
   334  0614                     	;# 
   335  0615                     	;# 
   336  0616                     	;# 
   337  0616                     	;# 
   338  0617                     	;# 
   339  0618                     	;# 
   340  0619                     	;# 
   341  0619                     	;# 
   342  061A                     	;# 
   343  061B                     	;# 
   344  061C                     	;# 
   345  061C                     	;# 
   346  0691                     	;# 
   347  0692                     	;# 
   348  0693                     	;# 
   349  0694                     	;# 
   350  0695                     	;# 
   351  0F0F                     	;# 
   352  0F10                     	;# 
   353  0F11                     	;# 
   354  0F12                     	;# 
   355  0F13                     	;# 
   356  0F14                     	;# 
   357  0F15                     	;# 
   358  0F16                     	;# 
   359  0F17                     	;# 
   360  0F18                     	;# 
   361  0F19                     	;# 
   362  0F1A                     	;# 
   363  0F1B                     	;# 
   364  0F1C                     	;# 
   365  0F1D                     	;# 
   366  0F1E                     	;# 
   367  0F1F                     	;# 
   368  0FE3                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000E                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008E                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0093                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  009F                     	;# 
   422  010C                     	;# 
   423  010E                     	;# 
   424  0111                     	;# 
   425  0112                     	;# 
   426  0113                     	;# 
   427  0114                     	;# 
   428  0115                     	;# 
   429  0116                     	;# 
   430  0117                     	;# 
   431  0118                     	;# 
   432  0119                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018E                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0197                     	;# 
   445  020C                     	;# 
   446  0211                     	;# 
   447  0211                     	;# 
   448  0212                     	;# 
   449  0212                     	;# 
   450  0213                     	;# 
   451  0213                     	;# 
   452  0214                     	;# 
   453  0214                     	;# 
   454  0215                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0216                     	;# 
   458  0216                     	;# 
   459  0217                     	;# 
   460  0217                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0498                     	;# 
   465  0498                     	;# 
   466  0499                     	;# 
   467  049A                     	;# 
   468  049B                     	;# 
   469  049B                     	;# 
   470  049C                     	;# 
   471  049D                     	;# 
   472  049E                     	;# 
   473  049F                     	;# 
   474  0611                     	;# 
   475  0612                     	;# 
   476  0613                     	;# 
   477  0613                     	;# 
   478  0614                     	;# 
   479  0615                     	;# 
   480  0616                     	;# 
   481  0616                     	;# 
   482  0617                     	;# 
   483  0618                     	;# 
   484  0619                     	;# 
   485  0619                     	;# 
   486  061A                     	;# 
   487  061B                     	;# 
   488  061C                     	;# 
   489  061C                     	;# 
   490  0691                     	;# 
   491  0692                     	;# 
   492  0693                     	;# 
   493  0694                     	;# 
   494  0695                     	;# 
   495  0F0F                     	;# 
   496  0F10                     	;# 
   497  0F11                     	;# 
   498  0F12                     	;# 
   499  0F13                     	;# 
   500  0F14                     	;# 
   501  0F15                     	;# 
   502  0F16                     	;# 
   503  0F17                     	;# 
   504  0F18                     	;# 
   505  0F19                     	;# 
   506  0F1A                     	;# 
   507  0F1B                     	;# 
   508  0F1C                     	;# 
   509  0F1D                     	;# 
   510  0F1E                     	;# 
   511  0F1F                     	;# 
   512  0FE3                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000E                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0015                     	;# 
   542  0016                     	;# 
   543  0016                     	;# 
   544  0017                     	;# 
   545  0018                     	;# 
   546  0019                     	;# 
   547  001A                     	;# 
   548  001B                     	;# 
   549  001C                     	;# 
   550  008C                     	;# 
   551  008E                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0097                     	;# 
   558  0099                     	;# 
   559  009A                     	;# 
   560  009B                     	;# 
   561  009B                     	;# 
   562  009C                     	;# 
   563  009D                     	;# 
   564  009E                     	;# 
   565  009F                     	;# 
   566  010C                     	;# 
   567  010E                     	;# 
   568  0111                     	;# 
   569  0112                     	;# 
   570  0113                     	;# 
   571  0114                     	;# 
   572  0115                     	;# 
   573  0116                     	;# 
   574  0117                     	;# 
   575  0118                     	;# 
   576  0119                     	;# 
   577  011D                     	;# 
   578  018C                     	;# 
   579  018E                     	;# 
   580  0191                     	;# 
   581  0191                     	;# 
   582  0192                     	;# 
   583  0193                     	;# 
   584  0193                     	;# 
   585  0194                     	;# 
   586  0195                     	;# 
   587  0196                     	;# 
   588  0197                     	;# 
   589  020C                     	;# 
   590  0211                     	;# 
   591  0211                     	;# 
   592  0212                     	;# 
   593  0212                     	;# 
   594  0213                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0214                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0216                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0217                     	;# 
   605  0391                     	;# 
   606  0392                     	;# 
   607  0393                     	;# 
   608  0498                     	;# 
   609  0498                     	;# 
   610  0499                     	;# 
   611  049A                     	;# 
   612  049B                     	;# 
   613  049B                     	;# 
   614  049C                     	;# 
   615  049D                     	;# 
   616  049E                     	;# 
   617  049F                     	;# 
   618  0611                     	;# 
   619  0612                     	;# 
   620  0613                     	;# 
   621  0613                     	;# 
   622  0614                     	;# 
   623  0615                     	;# 
   624  0616                     	;# 
   625  0616                     	;# 
   626  0617                     	;# 
   627  0618                     	;# 
   628  0619                     	;# 
   629  0619                     	;# 
   630  061A                     	;# 
   631  061B                     	;# 
   632  061C                     	;# 
   633  061C                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0F0F                     	;# 
   640  0F10                     	;# 
   641  0F11                     	;# 
   642  0F12                     	;# 
   643  0F13                     	;# 
   644  0F14                     	;# 
   645  0F15                     	;# 
   646  0F16                     	;# 
   647  0F17                     	;# 
   648  0F18                     	;# 
   649  0F19                     	;# 
   650  0F1A                     	;# 
   651  0F1B                     	;# 
   652  0F1C                     	;# 
   653  0F1D                     	;# 
   654  0F1E                     	;# 
   655  0F1F                     	;# 
   656  0FE3                     	;# 
   657  0FE4                     	;# 
   658  0FE5                     	;# 
   659  0FE6                     	;# 
   660  0FE7                     	;# 
   661  0FE8                     	;# 
   662  0FE9                     	;# 
   663  0FEA                     	;# 
   664  0FEB                     	;# 
   665  0FED                     	;# 
   666  0FEE                     	;# 
   667  0FEF                     	;# 
   668  0000                     	;# 
   669  0001                     	;# 
   670  0002                     	;# 
   671  0003                     	;# 
   672  0004                     	;# 
   673  0005                     	;# 
   674  0006                     	;# 
   675  0007                     	;# 
   676  0008                     	;# 
   677  0009                     	;# 
   678  000A                     	;# 
   679  000B                     	;# 
   680  000C                     	;# 
   681  000E                     	;# 
   682  0011                     	;# 
   683  0012                     	;# 
   684  0013                     	;# 
   685  0015                     	;# 
   686  0016                     	;# 
   687  0016                     	;# 
   688  0017                     	;# 
   689  0018                     	;# 
   690  0019                     	;# 
   691  001A                     	;# 
   692  001B                     	;# 
   693  001C                     	;# 
   694  008C                     	;# 
   695  008E                     	;# 
   696  0091                     	;# 
   697  0092                     	;# 
   698  0093                     	;# 
   699  0095                     	;# 
   700  0096                     	;# 
   701  0097                     	;# 
   702  0099                     	;# 
   703  009A                     	;# 
   704  009B                     	;# 
   705  009B                     	;# 
   706  009C                     	;# 
   707  009D                     	;# 
   708  009E                     	;# 
   709  009F                     	;# 
   710  010C                     	;# 
   711  010E                     	;# 
   712  0111                     	;# 
   713  0112                     	;# 
   714  0113                     	;# 
   715  0114                     	;# 
   716  0115                     	;# 
   717  0116                     	;# 
   718  0117                     	;# 
   719  0118                     	;# 
   720  0119                     	;# 
   721  011D                     	;# 
   722  018C                     	;# 
   723  018E                     	;# 
   724  0191                     	;# 
   725  0191                     	;# 
   726  0192                     	;# 
   727  0193                     	;# 
   728  0193                     	;# 
   729  0194                     	;# 
   730  0195                     	;# 
   731  0196                     	;# 
   732  0197                     	;# 
   733  020C                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0213                     	;# 
   740  0214                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0391                     	;# 
   750  0392                     	;# 
   751  0393                     	;# 
   752  0498                     	;# 
   753  0498                     	;# 
   754  0499                     	;# 
   755  049A                     	;# 
   756  049B                     	;# 
   757  049B                     	;# 
   758  049C                     	;# 
   759  049D                     	;# 
   760  049E                     	;# 
   761  049F                     	;# 
   762  0611                     	;# 
   763  0612                     	;# 
   764  0613                     	;# 
   765  0613                     	;# 
   766  0614                     	;# 
   767  0615                     	;# 
   768  0616                     	;# 
   769  0616                     	;# 
   770  0617                     	;# 
   771  0618                     	;# 
   772  0619                     	;# 
   773  0619                     	;# 
   774  061A                     	;# 
   775  061B                     	;# 
   776  061C                     	;# 
   777  061C                     	;# 
   778  0691                     	;# 
   779  0692                     	;# 
   780  0693                     	;# 
   781  0694                     	;# 
   782  0695                     	;# 
   783  0F0F                     	;# 
   784  0F10                     	;# 
   785  0F11                     	;# 
   786  0F12                     	;# 
   787  0F13                     	;# 
   788  0F14                     	;# 
   789  0F15                     	;# 
   790  0F16                     	;# 
   791  0F17                     	;# 
   792  0F18                     	;# 
   793  0F19                     	;# 
   794  0F1A                     	;# 
   795  0F1B                     	;# 
   796  0F1C                     	;# 
   797  0F1D                     	;# 
   798  0F1E                     	;# 
   799  0F1F                     	;# 
   800  0FE3                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812  0000                     	;# 
   813  0001                     	;# 
   814  0002                     	;# 
   815  0003                     	;# 
   816  0004                     	;# 
   817  0005                     	;# 
   818  0006                     	;# 
   819  0007                     	;# 
   820  0008                     	;# 
   821  0009                     	;# 
   822  000A                     	;# 
   823  000B                     	;# 
   824  000C                     	;# 
   825  000E                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0013                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  008C                     	;# 
   839  008E                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0093                     	;# 
   843  0095                     	;# 
   844  0096                     	;# 
   845  0097                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  009F                     	;# 
   854  010C                     	;# 
   855  010E                     	;# 
   856  0111                     	;# 
   857  0112                     	;# 
   858  0113                     	;# 
   859  0114                     	;# 
   860  0115                     	;# 
   861  0116                     	;# 
   862  0117                     	;# 
   863  0118                     	;# 
   864  0119                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0194                     	;# 
   874  0195                     	;# 
   875  0196                     	;# 
   876  0197                     	;# 
   877  020C                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0391                     	;# 
   894  0392                     	;# 
   895  0393                     	;# 
   896  0498                     	;# 
   897  0498                     	;# 
   898  0499                     	;# 
   899  049A                     	;# 
   900  049B                     	;# 
   901  049B                     	;# 
   902  049C                     	;# 
   903  049D                     	;# 
   904  049E                     	;# 
   905  049F                     	;# 
   906  0611                     	;# 
   907  0612                     	;# 
   908  0613                     	;# 
   909  0613                     	;# 
   910  0614                     	;# 
   911  0615                     	;# 
   912  0616                     	;# 
   913  0616                     	;# 
   914  0617                     	;# 
   915  0618                     	;# 
   916  0619                     	;# 
   917  0619                     	;# 
   918  061A                     	;# 
   919  061B                     	;# 
   920  061C                     	;# 
   921  061C                     	;# 
   922  0691                     	;# 
   923  0692                     	;# 
   924  0693                     	;# 
   925  0694                     	;# 
   926  0695                     	;# 
   927  0F0F                     	;# 
   928  0F10                     	;# 
   929  0F11                     	;# 
   930  0F12                     	;# 
   931  0F13                     	;# 
   932  0F14                     	;# 
   933  0F15                     	;# 
   934  0F16                     	;# 
   935  0F17                     	;# 
   936  0F18                     	;# 
   937  0F19                     	;# 
   938  0F1A                     	;# 
   939  0F1B                     	;# 
   940  0F1C                     	;# 
   941  0F1D                     	;# 
   942  0F1E                     	;# 
   943  0F1F                     	;# 
   944  0FE3                     	;# 
   945  0FE4                     	;# 
   946  0FE5                     	;# 
   947  0FE6                     	;# 
   948  0FE7                     	;# 
   949  0FE8                     	;# 
   950  0FE9                     	;# 
   951  0FEA                     	;# 
   952  0FEB                     	;# 
   953  0FED                     	;# 
   954  0FEE                     	;# 
   955  0FEF                     	;# 
   956  0000                     	;# 
   957  0001                     	;# 
   958  0002                     	;# 
   959  0003                     	;# 
   960  0004                     	;# 
   961  0005                     	;# 
   962  0006                     	;# 
   963  0007                     	;# 
   964  0008                     	;# 
   965  0009                     	;# 
   966  000A                     	;# 
   967  000B                     	;# 
   968  000C                     	;# 
   969  000E                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0013                     	;# 
   973  0015                     	;# 
   974  0016                     	;# 
   975  0016                     	;# 
   976  0017                     	;# 
   977  0018                     	;# 
   978  0019                     	;# 
   979  001A                     	;# 
   980  001B                     	;# 
   981  001C                     	;# 
   982  008C                     	;# 
   983  008E                     	;# 
   984  0091                     	;# 
   985  0092                     	;# 
   986  0093                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  009F                     	;# 
   998  010C                     	;# 
   999  010E                     	;# 
  1000  0111                     	;# 
  1001  0112                     	;# 
  1002  0113                     	;# 
  1003  0114                     	;# 
  1004  0115                     	;# 
  1005  0116                     	;# 
  1006  0117                     	;# 
  1007  0118                     	;# 
  1008  0119                     	;# 
  1009  011D                     	;# 
  1010  018C                     	;# 
  1011  018E                     	;# 
  1012  0191                     	;# 
  1013  0191                     	;# 
  1014  0192                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0197                     	;# 
  1021  020C                     	;# 
  1022  0211                     	;# 
  1023  0211                     	;# 
  1024  0212                     	;# 
  1025  0212                     	;# 
  1026  0213                     	;# 
  1027  0213                     	;# 
  1028  0214                     	;# 
  1029  0214                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  0391                     	;# 
  1038  0392                     	;# 
  1039  0393                     	;# 
  1040  0498                     	;# 
  1041  0498                     	;# 
  1042  0499                     	;# 
  1043  049A                     	;# 
  1044  049B                     	;# 
  1045  049B                     	;# 
  1046  049C                     	;# 
  1047  049D                     	;# 
  1048  049E                     	;# 
  1049  049F                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0613                     	;# 
  1054  0614                     	;# 
  1055  0615                     	;# 
  1056  0616                     	;# 
  1057  0616                     	;# 
  1058  0617                     	;# 
  1059  0618                     	;# 
  1060  0619                     	;# 
  1061  0619                     	;# 
  1062  061A                     	;# 
  1063  061B                     	;# 
  1064  061C                     	;# 
  1065  061C                     	;# 
  1066  0691                     	;# 
  1067  0692                     	;# 
  1068  0693                     	;# 
  1069  0694                     	;# 
  1070  0695                     	;# 
  1071  0F0F                     	;# 
  1072  0F10                     	;# 
  1073  0F11                     	;# 
  1074  0F12                     	;# 
  1075  0F13                     	;# 
  1076  0F14                     	;# 
  1077  0F15                     	;# 
  1078  0F16                     	;# 
  1079  0F17                     	;# 
  1080  0F18                     	;# 
  1081  0F19                     	;# 
  1082  0F1A                     	;# 
  1083  0F1B                     	;# 
  1084  0F1C                     	;# 
  1085  0F1D                     	;# 
  1086  0F1E                     	;# 
  1087  0F1F                     	;# 
  1088  0FE3                     	;# 
  1089  0FE4                     	;# 
  1090  0FE5                     	;# 
  1091  0FE6                     	;# 
  1092  0FE7                     	;# 
  1093  0FE8                     	;# 
  1094  0FE9                     	;# 
  1095  0FEA                     	;# 
  1096  0FEB                     	;# 
  1097  0FED                     	;# 
  1098  0FEE                     	;# 
  1099  0FEF                     	;# 
  1100  0000                     	;# 
  1101  0001                     	;# 
  1102  0002                     	;# 
  1103  0003                     	;# 
  1104  0004                     	;# 
  1105  0005                     	;# 
  1106  0006                     	;# 
  1107  0007                     	;# 
  1108  0008                     	;# 
  1109  0009                     	;# 
  1110  000A                     	;# 
  1111  000B                     	;# 
  1112  000C                     	;# 
  1113  000E                     	;# 
  1114  0011                     	;# 
  1115  0012                     	;# 
  1116  0013                     	;# 
  1117  0015                     	;# 
  1118  0016                     	;# 
  1119  0016                     	;# 
  1120  0017                     	;# 
  1121  0018                     	;# 
  1122  0019                     	;# 
  1123  001A                     	;# 
  1124  001B                     	;# 
  1125  001C                     	;# 
  1126  008C                     	;# 
  1127  008E                     	;# 
  1128  0091                     	;# 
  1129  0092                     	;# 
  1130  0093                     	;# 
  1131  0095                     	;# 
  1132  0096                     	;# 
  1133  0097                     	;# 
  1134  0099                     	;# 
  1135  009A                     	;# 
  1136  009B                     	;# 
  1137  009B                     	;# 
  1138  009C                     	;# 
  1139  009D                     	;# 
  1140  009E                     	;# 
  1141  009F                     	;# 
  1142  010C                     	;# 
  1143  010E                     	;# 
  1144  0111                     	;# 
  1145  0112                     	;# 
  1146  0113                     	;# 
  1147  0114                     	;# 
  1148  0115                     	;# 
  1149  0116                     	;# 
  1150  0117                     	;# 
  1151  0118                     	;# 
  1152  0119                     	;# 
  1153  011D                     	;# 
  1154  018C                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0194                     	;# 
  1162  0195                     	;# 
  1163  0196                     	;# 
  1164  0197                     	;# 
  1165  020C                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0216                     	;# 
  1178  0216                     	;# 
  1179  0217                     	;# 
  1180  0217                     	;# 
  1181  0391                     	;# 
  1182  0392                     	;# 
  1183  0393                     	;# 
  1184  0498                     	;# 
  1185  0498                     	;# 
  1186  0499                     	;# 
  1187  049A                     	;# 
  1188  049B                     	;# 
  1189  049B                     	;# 
  1190  049C                     	;# 
  1191  049D                     	;# 
  1192  049E                     	;# 
  1193  049F                     	;# 
  1194  0611                     	;# 
  1195  0612                     	;# 
  1196  0613                     	;# 
  1197  0613                     	;# 
  1198  0614                     	;# 
  1199  0615                     	;# 
  1200  0616                     	;# 
  1201  0616                     	;# 
  1202  0617                     	;# 
  1203  0618                     	;# 
  1204  0619                     	;# 
  1205  0619                     	;# 
  1206  061A                     	;# 
  1207  061B                     	;# 
  1208  061C                     	;# 
  1209  061C                     	;# 
  1210  0691                     	;# 
  1211  0692                     	;# 
  1212  0693                     	;# 
  1213  0694                     	;# 
  1214  0695                     	;# 
  1215  0F0F                     	;# 
  1216  0F10                     	;# 
  1217  0F11                     	;# 
  1218  0F12                     	;# 
  1219  0F13                     	;# 
  1220  0F14                     	;# 
  1221  0F15                     	;# 
  1222  0F16                     	;# 
  1223  0F17                     	;# 
  1224  0F18                     	;# 
  1225  0F19                     	;# 
  1226  0F1A                     	;# 
  1227  0F1B                     	;# 
  1228  0F1C                     	;# 
  1229  0F1D                     	;# 
  1230  0F1E                     	;# 
  1231  0F1F                     	;# 
  1232  0FE3                     	;# 
  1233  0FE4                     	;# 
  1234  0FE5                     	;# 
  1235  0FE6                     	;# 
  1236  0FE7                     	;# 
  1237  0FE8                     	;# 
  1238  0FE9                     	;# 
  1239  0FEA                     	;# 
  1240  0FEB                     	;# 
  1241  0FED                     	;# 
  1242  0FEE                     	;# 
  1243  0FEF                     	;# 
  1244  0000                     	;# 
  1245  0001                     	;# 
  1246  0002                     	;# 
  1247  0003                     	;# 
  1248  0004                     	;# 
  1249  0005                     	;# 
  1250  0006                     	;# 
  1251  0007                     	;# 
  1252  0008                     	;# 
  1253  0009                     	;# 
  1254  000A                     	;# 
  1255  000B                     	;# 
  1256  000C                     	;# 
  1257  000E                     	;# 
  1258  0011                     	;# 
  1259  0012                     	;# 
  1260  0013                     	;# 
  1261  0015                     	;# 
  1262  0016                     	;# 
  1263  0016                     	;# 
  1264  0017                     	;# 
  1265  0018                     	;# 
  1266  0019                     	;# 
  1267  001A                     	;# 
  1268  001B                     	;# 
  1269  001C                     	;# 
  1270  008C                     	;# 
  1271  008E                     	;# 
  1272  0091                     	;# 
  1273  0092                     	;# 
  1274  0093                     	;# 
  1275  0095                     	;# 
  1276  0096                     	;# 
  1277  0097                     	;# 
  1278  0099                     	;# 
  1279  009A                     	;# 
  1280  009B                     	;# 
  1281  009B                     	;# 
  1282  009C                     	;# 
  1283  009D                     	;# 
  1284  009E                     	;# 
  1285  009F                     	;# 
  1286  010C                     	;# 
  1287  010E                     	;# 
  1288  0111                     	;# 
  1289  0112                     	;# 
  1290  0113                     	;# 
  1291  0114                     	;# 
  1292  0115                     	;# 
  1293  0116                     	;# 
  1294  0117                     	;# 
  1295  0118                     	;# 
  1296  0119                     	;# 
  1297  011D                     	;# 
  1298  018C                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  020C                     	;# 
  1310  0211                     	;# 
  1311  0211                     	;# 
  1312  0212                     	;# 
  1313  0212                     	;# 
  1314  0213                     	;# 
  1315  0213                     	;# 
  1316  0214                     	;# 
  1317  0214                     	;# 
  1318  0215                     	;# 
  1319  0215                     	;# 
  1320  0215                     	;# 
  1321  0216                     	;# 
  1322  0216                     	;# 
  1323  0217                     	;# 
  1324  0217                     	;# 
  1325  0391                     	;# 
  1326  0392                     	;# 
  1327  0393                     	;# 
  1328  0498                     	;# 
  1329  0498                     	;# 
  1330  0499                     	;# 
  1331  049A                     	;# 
  1332  049B                     	;# 
  1333  049B                     	;# 
  1334  049C                     	;# 
  1335  049D                     	;# 
  1336  049E                     	;# 
  1337  049F                     	;# 
  1338  0611                     	;# 
  1339  0612                     	;# 
  1340  0613                     	;# 
  1341  0613                     	;# 
  1342  0614                     	;# 
  1343  0615                     	;# 
  1344  0616                     	;# 
  1345  0616                     	;# 
  1346  0617                     	;# 
  1347  0618                     	;# 
  1348  0619                     	;# 
  1349  0619                     	;# 
  1350  061A                     	;# 
  1351  061B                     	;# 
  1352  061C                     	;# 
  1353  061C                     	;# 
  1354  0691                     	;# 
  1355  0692                     	;# 
  1356  0693                     	;# 
  1357  0694                     	;# 
  1358  0695                     	;# 
  1359  0F0F                     	;# 
  1360  0F10                     	;# 
  1361  0F11                     	;# 
  1362  0F12                     	;# 
  1363  0F13                     	;# 
  1364  0F14                     	;# 
  1365  0F15                     	;# 
  1366  0F16                     	;# 
  1367  0F17                     	;# 
  1368  0F18                     	;# 
  1369  0F19                     	;# 
  1370  0F1A                     	;# 
  1371  0F1B                     	;# 
  1372  0F1C                     	;# 
  1373  0F1D                     	;# 
  1374  0F1E                     	;# 
  1375  0F1F                     	;# 
  1376  0FE3                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388                           
  1389                           	psect	idataBANK0
  1390  048F                     __pidataBANK0:	
  1391                           
  1392                           ;initializer for _reloading_val
  1393  048F  3490               	retlw	144
  1394  0490  341A               	retlw	26
  1395                           
  1396                           ;initializer for _v_adj_slow
  1397  0491  3458               	retlw	88
  1398  0492  341B               	retlw	27
  1399                           
  1400                           ;initializer for _cnt_adc
  1401  0493  3463               	retlw	99
  1402  0494  3400               	retlw	0
  1403                           
  1404                           ;initializer for _v_test
  1405  0495  3400               	retlw	0
  1406  0496  3404               	retlw	4
  1407                           
  1408                           ;initializer for _Tmr0fuctionswitch
  1409  0497  3403               	retlw	3
  1410                           
  1411                           ;initializer for _flag_L1
  1412  0498  3401               	retlw	1
  1413                           
  1414                           ;initializer for _init_flag
  1415  0499  3401               	retlw	1
  1416                           
  1417                           ;initializer for _start_switchpushflag
  1418  049A  3401               	retlw	1
  1419                           
  1420                           	psect	nvBANK0
  1421  0053                     __pnvBANK0:	
  1422  0053                     _TMR2_InterruptHandler:	
  1423  0053                     	ds	2
  1424  0055                     _TMR1_InterruptHandler:	
  1425  0055                     	ds	2
  1426  0057                     _timer1ReloadVal:	
  1427  0057                     	ds	2
  1428  0059                     _TMR0_InterruptHandler:	
  1429  0059                     	ds	2
  1430  005B                     _IOCAF2_InterruptHandler:	
  1431  005B                     	ds	2
  1432  005D                     _timer0ReloadVal:	
  1433  005D                     	ds	1
  1434  000C                     _PORTAbits	set	12
  1435  001C                     _T2CONbits	set	28
  1436  001C                     _T2CON	set	28
  1437  001A                     _TMR2	set	26
  1438  001B                     _PR2	set	27
  1439  0019                     _T1GCONbits	set	25
  1440  0018                     _T1CONbits	set	24
  1441  0018                     _T1CON	set	24
  1442  0016                     _TMR1L	set	22
  1443  0017                     _TMR1H	set	23
  1444  0019                     _T1GCON	set	25
  1445  0011                     _PIR1bits	set	17
  1446  0015                     _TMR0	set	21
  1447  000B                     _INTCONbits	set	11
  1448  0091                     _PIE1bits	set	145
  1449  0095                     _OPTION_REG	set	149
  1450  009D                     _ADCON0bits	set	157
  1451  009C                     _ADRESH	set	156
  1452  009B                     _ADRESL	set	155
  1453  009F                     _ADCON2	set	159
  1454  009E                     _ADCON1	set	158
  1455  009D                     _ADCON0	set	157
  1456  0095                     _OPTION_REGbits	set	149
  1457  008E                     _TRISC	set	142
  1458  008C                     _TRISA	set	140
  1459  0097                     _WDTCON	set	151
  1460  0099                     _OSCCON	set	153
  1461  010C                     _LATAbits	set	268
  1462  0115                     _CMOUTbits	set	277
  1463  0112                     _CM1CON1	set	274
  1464  0111                     _CM1CON0	set	273
  1465  011D                     _APFCON	set	285
  1466  010E                     _LATC	set	270
  1467  010C                     _LATA	set	268
  1468  0116                     _BORCON	set	278
  1469  010E                     _LATCbits	set	270
  1470  018C                     _ANSELA	set	396
  1471  018E                     _ANSELC	set	398
  1472  020C                     _WPUA	set	524
  1473  0391                     _IOCAPbits	set	913
  1474  0392                     _IOCANbits	set	914
  1475  0393                     _IOCAFbits	set	915
  1476                           
  1477                           ; #config settings
  1478  0000                     
  1479                           	psect	cinit
  1480  002A                     start_initialization:	
  1481  002A                     __initialization:	
  1482                           
  1483                           ; Initialize objects allocated to BANK0
  1484  002A  308F               	movlw	low __pidataBANK0
  1485  002B  0084               	movwf	4
  1486  002C  3084               	movlw	(high __pidataBANK0)| (0+128)
  1487  002D  0085               	movwf	5
  1488  002E  3047               	movlw	low __pdataBANK0
  1489  002F  0086               	movwf	6
  1490  0030  3000               	movlw	high __pdataBANK0
  1491  0031  0087               	movwf	7
  1492  0032  300C               	movlw	12
  1493  0033  24D5               	fcall	init_ram
  1494                           
  1495                           ; Clear objects allocated to BANK0
  1496  0034  3020               	movlw	low __pbssBANK0
  1497  0035  0084               	movwf	4
  1498  0036  3000               	movlw	high __pbssBANK0
  1499  0037  0085               	movwf	5
  1500  0038  3027               	movlw	39
  1501  0039  24DB               	fcall	clear_ram0
  1502                           
  1503                           ; Clear objects allocated to BANK1
  1504  003A  30A0               	movlw	low __pbssBANK1
  1505  003B  0084               	movwf	4
  1506  003C  3000               	movlw	high __pbssBANK1
  1507  003D  0085               	movwf	5
  1508  003E  3008               	movlw	8
  1509  003F  24DB               	fcall	clear_ram0
  1510  0040                     end_of_initialization:	
  1511                           ;End of C runtime variable initialization code
  1512                           
  1513  0040                     __end_of__initialization:	
  1514  0040  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1515  0041  0020               	movlb	0
  1516  0042  2AC6               	ljmp	_main	;jump to C main() function
  1517                           
  1518                           	psect	bssBANK0
  1519  0020                     __pbssBANK0:	
  1520  0020                     _cnt:	
  1521  0020                     	ds	2
  1522  0022                     _cnt_rpmcapture:	
  1523  0022                     	ds	2
  1524  0024                     _cmp1cnt:	
  1525  0024                     	ds	2
  1526  0026                     _t0_tick:	
  1527  0026                     	ds	2
  1528  0028                     _t1_last_tick:	
  1529  0028                     	ds	2
  1530  002A                     _t2_last_tick:	
  1531  002A                     	ds	2
  1532  002C                     _tmr0cnt:	
  1533  002C                     	ds	2
  1534  002E                     _i:	
  1535  002E                     	ds	2
  1536  0030                     _adjtime:	
  1537  0030                     	ds	2
  1538  0032                     _v_ntc:	
  1539  0032                     	ds	2
  1540  0034                     _v_adj:	
  1541  0034                     	ds	2
  1542  0036                     TMR0_ISR@CountCallBack:	
  1543  0036                     	ds	2
  1544  0038                     INT_T2@last_switch_count:	
  1545  0038                     	ds	1
  1546  0039                     _Motor_run_status:	
  1547  0039                     	ds	1
  1548  003A                     _Motor_Rpm_Mode:	
  1549  003A                     	ds	1
  1550  003B                     _Tmr1fuctionswitch:	
  1551  003B                     	ds	1
  1552  003C                     _flag_blink:	
  1553  003C                     	ds	1
  1554  003D                     _flag_L2:	
  1555  003D                     	ds	1
  1556  003E                     _flag_rpmcapture:	
  1557  003E                     	ds	1
  1558  003F                     _switchflag:	
  1559  003F                     	ds	1
  1560  0040                     _switch_count:	
  1561  0040                     	ds	1
  1562  0041                     _carbonbrushoutcnt:	
  1563  0041                     	ds	1
  1564  0042                     _overheatcnt:	
  1565  0042                     	ds	1
  1566  0043                     _ra2sta:	
  1567  0043                     	ds	1
  1568  0044                     _count_sta:	
  1569  0044                     	ds	1
  1570  0045                     _count:	
  1571  0045                     	ds	1
  1572  0046                     _trigger:	
  1573  0046                     	ds	1
  1574                           
  1575                           	psect	dataBANK0
  1576  0047                     __pdataBANK0:	
  1577  0047                     _reloading_val:	
  1578  0047                     	ds	2
  1579  0049                     _v_adj_slow:	
  1580  0049                     	ds	2
  1581  004B                     _cnt_adc:	
  1582  004B                     	ds	2
  1583  004D                     _v_test:	
  1584  004D                     	ds	2
  1585  004F                     _Tmr0fuctionswitch:	
  1586  004F                     	ds	1
  1587  0050                     _flag_L1:	
  1588  0050                     	ds	1
  1589  0051                     _init_flag:	
  1590  0051                     	ds	1
  1591  0052                     _start_switchpushflag:	
  1592  0052                     	ds	1
  1593                           
  1594                           	psect	bssBANK1
  1595  00A0                     __pbssBANK1:	
  1596  00A0                     _v_adj_filter:	
  1597  00A0                     	ds	8
  1598                           
  1599                           	psect	inittext
  1600  04D5                     init_ram:	
  1601  04D5  00FE               	movwf	126
  1602  04D6                     initloop:	
  1603  04D6  0012               	moviw fsr0++
  1604  04D7  001E               	movwi fsr1++
  1605  04D8  0BFE               	decfsz	126,f
  1606  04D9  2CD6               	goto	initloop
  1607  04DA  3400               	retlw	0
  1608                           
  1609                           	psect	clrtext
  1610  04DB                     clear_ram0:	
  1611                           ;	Called with FSR0 containing the base address, and
  1612                           ;	WREG with the size to clear
  1613                           
  1614  04DB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1615  04DC                     clrloop0:	
  1616  04DC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1617  04DD  3101               	addfsr 0,1
  1618  04DE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1619  04DF  2CDC               	goto	clrloop0	;have we reached the end yet?
  1620  04E0  3400               	retlw	0	;all done for this memory range, return
  1621                           
  1622                           	psect	cstackBANK1
  1623  00A8                     __pcstackBANK1:	
  1624  00A8                     ??_main:	
  1625                           
  1626                           ; 1 bytes @ 0x0
  1627  00A8                     	ds	2
  1628                           
  1629                           	psect	cstackCOMMON
  1630  0070                     __pcstackCOMMON:	
  1631  0070                     ?_PIN_MANAGER_Initialize:	
  1632  0070                     ?_OSCILLATOR_Initialize:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_WDT_Initialize:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_CMP1_Initialize:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_ADC_Initialize:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ?_TMR2_Initialize:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_TMR1_Initialize:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_TMR0_Initialize:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_IOCAF2_ISR:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_TMR0_DefaultInterruptHandler:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ??_TMR0_DefaultInterruptHandler:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_TMR0_CallBack:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_TMR1_ISR:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_TMR2_ISR:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_TMR1_DefaultInterruptHandler:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ??_TMR1_DefaultInterruptHandler:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_TMR1_CallBack:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ??_TMR1_CallBack:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     ?_TMR2_DefaultInterruptHandler:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0070                     ??_TMR2_DefaultInterruptHandler:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0070                     ?_TMR2_CallBack:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0070                     ?_led_blink:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0070                     ??_led_blink:	
  1702                           ; 1 bytes @ 0x0
  1703                           
  1704  0070                     ?_tmr1gate_func_init:	
  1705                           ; 1 bytes @ 0x0
  1706                           
  1707  0070                     ?_tmr0reloadcnt:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0070                     ?_tmr1cnt_func_init:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0070                     ??_tmr1cnt_func_init:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0070                     ?_SYSTEM_Initialize:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0070                     ?_PIN_MANAGER_IOC:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ?_TMR0_ISR:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ?_INTERRUPT_InterruptManager:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ?_TMR1_StartTimer:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ??_TMR1_StartTimer:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_TMR1_StopTimer:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ??_TMR1_StopTimer:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ?_TMR1_WriteTimer:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ?_TMR1_Reload:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ?_INT_T2:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_INT_RA2:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_main:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_ADC_GetConversion:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_TMR1_ReadTimer:	
  1759                           ; 2 bytes @ 0x0
  1760                           
  1761  0070                     ?___lwdiv:	
  1762                           ; 2 bytes @ 0x0
  1763                           
  1764  0070                     TMR1_WriteTimer@timerVal:	
  1765                           ; 2 bytes @ 0x0
  1766                           
  1767  0070                     ___lwdiv@divisor:	
  1768                           ; 2 bytes @ 0x0
  1769                           
  1770                           
  1771                           ; 2 bytes @ 0x0
  1772  0070                     	ds	2
  1773  0072                     ??_TMR1_ISR:	
  1774  0072                     ??_tmr1gate_func_init:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0072                     ??_tmr0reloadcnt:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0072                     ??_ADC_GetConversion:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0072                     ??_TMR1_ReadTimer:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0072                     ??_TMR1_WriteTimer:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0072                     ??_TMR1_Reload:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0072                     ??_INT_RA2:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795  0072                     ___lwdiv@dividend:	
  1796                           ; 1 bytes @ 0x2
  1797                           
  1798                           
  1799                           ; 2 bytes @ 0x2
  1800  0072                     	ds	1
  1801  0073                     ??_TMR0_CallBack:	
  1802  0073                     ??_TMR0_ISR:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0073                     ADC_GetConversion@channel:	
  1806                           ; 1 bytes @ 0x3
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0x3
  1810  0073                     	ds	1
  1811  0074                     ??_IOCAF2_ISR:	
  1812  0074                     ??_PIN_MANAGER_IOC:	
  1813                           ; 1 bytes @ 0x4
  1814                           
  1815  0074                     ??___lwdiv:	
  1816                           ; 1 bytes @ 0x4
  1817                           
  1818                           
  1819                           ; 1 bytes @ 0x4
  1820  0074                     	ds	1
  1821  0075                     ___lwdiv@quotient:	
  1822                           
  1823                           ; 2 bytes @ 0x5
  1824  0075                     	ds	2
  1825  0077                     ___lwdiv@counter:	
  1826  0077                     TMR1_ReadTimer@readVal:	
  1827                           ; 1 bytes @ 0x7
  1828                           
  1829                           
  1830                           ; 2 bytes @ 0x7
  1831  0077                     	ds	2
  1832  0079                     TMR1_ReadTimer@readValHigh:	
  1833                           
  1834                           ; 1 bytes @ 0x9
  1835  0079                     	ds	1
  1836  007A                     TMR1_ReadTimer@readValLow:	
  1837                           
  1838                           ; 1 bytes @ 0xA
  1839  007A                     	ds	1
  1840  007B                     ?_rpm_celiang:	
  1841                           
  1842                           ; 2 bytes @ 0xB
  1843  007B                     	ds	2
  1844  007D                     ??_rpm_celiang:	
  1845  007D                     INT_T2@i:	
  1846                           ; 1 bytes @ 0xD
  1847                           
  1848                           
  1849                           ; 1 bytes @ 0xD
  1850  007D                     	ds	1
  1851  007E                     ??_TMR2_ISR:	
  1852  007E                     ??_TMR2_CallBack:	
  1853                           ; 1 bytes @ 0xE
  1854                           
  1855                           
  1856                           	psect	cstackBANK0
  1857  005E                     __pcstackBANK0:	
  1858                           ; 1 bytes @ 0xE
  1859                           
  1860  005E                     rpm_celiang@a:	
  1861                           
  1862                           ; 2 bytes @ 0x0
  1863  005E                     	ds	2
  1864  0060                     ??_INT_T2:	
  1865                           
  1866                           ; 1 bytes @ 0x2
  1867  0060                     	ds	4
  1868  0064                     ??_INTERRUPT_InterruptManager:	
  1869                           
  1870                           ; 1 bytes @ 0x6
  1871  0064                     	ds	1
  1872  0065                     ??_OSCILLATOR_Initialize:	
  1873  0065                     ??_WDT_Initialize:	
  1874                           ; 1 bytes @ 0x7
  1875                           
  1876  0065                     ??_CMP1_Initialize:	
  1877                           ; 1 bytes @ 0x7
  1878                           
  1879  0065                     ??_ADC_Initialize:	
  1880                           ; 1 bytes @ 0x7
  1881                           
  1882  0065                     ?_IOCAF2_SetInterruptHandler:	
  1883                           ; 1 bytes @ 0x7
  1884                           
  1885  0065                     ?_TMR0_SetInterruptHandler:	
  1886                           ; 1 bytes @ 0x7
  1887                           
  1888  0065                     ?_TMR1_SetInterruptHandler:	
  1889                           ; 1 bytes @ 0x7
  1890                           
  1891  0065                     ?_TMR2_SetInterruptHandler:	
  1892                           ; 1 bytes @ 0x7
  1893                           
  1894  0065                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1895                           ; 1 bytes @ 0x7
  1896                           
  1897  0065                     TMR0_SetInterruptHandler@InterruptHandler:	
  1898                           ; 2 bytes @ 0x7
  1899                           
  1900  0065                     TMR1_SetInterruptHandler@InterruptHandler:	
  1901                           ; 2 bytes @ 0x7
  1902                           
  1903  0065                     TMR2_SetInterruptHandler@InterruptHandler:	
  1904                           ; 2 bytes @ 0x7
  1905                           
  1906                           
  1907                           ; 2 bytes @ 0x7
  1908  0065                     	ds	2
  1909  0067                     ??_PIN_MANAGER_Initialize:	
  1910  0067                     ??_TMR2_Initialize:	
  1911                           ; 1 bytes @ 0x9
  1912                           
  1913  0067                     ??_TMR1_Initialize:	
  1914                           ; 1 bytes @ 0x9
  1915                           
  1916  0067                     ??_TMR0_Initialize:	
  1917                           ; 1 bytes @ 0x9
  1918                           
  1919  0067                     ??_IOCAF2_SetInterruptHandler:	
  1920                           ; 1 bytes @ 0x9
  1921                           
  1922  0067                     ??_TMR0_SetInterruptHandler:	
  1923                           ; 1 bytes @ 0x9
  1924                           
  1925  0067                     ??_TMR1_SetInterruptHandler:	
  1926                           ; 1 bytes @ 0x9
  1927                           
  1928  0067                     ??_TMR2_SetInterruptHandler:	
  1929                           ; 1 bytes @ 0x9
  1930                           
  1931                           
  1932                           ; 1 bytes @ 0x9
  1933  0067                     	ds	1
  1934  0068                     ??_SYSTEM_Initialize:	
  1935                           
  1936                           	psect	maintext
  1937  02C6                     __pmaintext:	
  1938                           ; 1 bytes @ 0xA
  1939 ;;
  1940 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1941 ;;
  1942 ;; *************** function _main *****************
  1943 ;; Defined at:
  1944 ;;		line 560 in file "main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : B1F/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1
  1958 ;;      Params:         0       0       0
  1959 ;;      Locals:         0       0       0
  1960 ;;      Temps:          0       0       2
  1961 ;;      Totals:         0       0       2
  1962 ;;Total ram usage:        2 bytes
  1963 ;; Hardware stack levels required when called:   10
  1964 ;; This function calls:
  1965 ;;		_IOCAF2_SetInterruptHandler
  1966 ;;		_SYSTEM_Initialize
  1967 ;;		_TMR0_SetInterruptHandler
  1968 ;;		_TMR1_SetInterruptHandler
  1969 ;;		_TMR2_SetInterruptHandler
  1970 ;; This function is called by:
  1971 ;;		Startup code after reset
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function _main
  1977  02C6                     _main:	
  1978                           
  1979                           ;main.c: 562: SYSTEM_Initialize();
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1983  02C6  2475               	fcall	_SYSTEM_Initialize
  1984                           
  1985                           ;main.c: 564: TMR0_SetInterruptHandler(tmr0reloadcnt);
  1986  02C7  304A               	movlw	low _tmr0reloadcnt
  1987  02C8  0020               	movlb	0	; select bank0
  1988  02C9  00E5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1989  02CA  3003               	movlw	high _tmr0reloadcnt
  1990  02CB  00E6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1991  02CC  24ED               	fcall	_TMR0_SetInterruptHandler
  1992                           
  1993                           ;main.c: 565: TMR1_SetInterruptHandler(tmr1cnt_func_init);
  1994  02CD  30FF               	movlw	low _tmr1cnt_func_init
  1995  02CE  0020               	movlb	0	; select bank0
  1996  02CF  00E5               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  1997  02D0  3004               	movlw	high _tmr1cnt_func_init
  1998  02D1  00E6               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  1999  02D2  24E7               	fcall	_TMR1_SetInterruptHandler
  2000                           
  2001                           ;main.c: 566: TMR2_SetInterruptHandler(INT_T2);
  2002  02D3  3043               	movlw	low _INT_T2
  2003  02D4  0020               	movlb	0	; select bank0
  2004  02D5  00E5               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2005  02D6  3000               	movlw	high _INT_T2
  2006  02D7  00E6               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2007  02D8  24E1               	fcall	_TMR2_SetInterruptHandler
  2008                           
  2009                           ;main.c: 567: IOCAF2_SetInterruptHandler(INT_RA2);
  2010  02D9  301A               	movlw	low _INT_RA2
  2011  02DA  0020               	movlb	0	; select bank0
  2012  02DB  00E5               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  2013  02DC  3002               	movlw	high _INT_RA2
  2014  02DD  00E6               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  2015  02DE  24F3               	fcall	_IOCAF2_SetInterruptHandler
  2016                           
  2017                           ;main.c: 569: (INTCONbits.GIE = 1);
  2018  02DF  178B               	bsf	11,7	;volatile
  2019                           
  2020                           ;main.c: 572: (INTCONbits.PEIE = 1);
  2021  02E0  170B               	bsf	11,6	;volatile
  2022                           
  2023                           ;main.c: 580: LATAbits.LATA5 = 0;
  2024  02E1  0022               	movlb	2	; select bank2
  2025  02E2  128C               	bcf	12,5	;volatile
  2026                           
  2027                           ;main.c: 581: Tmr0fuctionswitch=dlycnt_processing;
  2028  02E3  3003               	movlw	3
  2029  02E4  0021               	movlb	1	; select bank1
  2030  02E5  00A8               	movwf	??_main^(0+128)
  2031  02E6  0828               	movf	??_main^(0+128),w
  2032  02E7  0020               	movlb	0	; select bank0
  2033  02E8  00CF               	movwf	_Tmr0fuctionswitch
  2034                           
  2035                           ;main.c: 582: _delay((unsigned long)((200)*(16000000/4000.0)));
  2036  02E9  3005               	movlw	5
  2037  02EA  0021               	movlb	1	; select bank1
  2038  02EB  00A9               	movwf	(??_main^(0+128)+1)
  2039  02EC  300F               	movlw	15
  2040  02ED  00A8               	movwf	??_main^(0+128)
  2041  02EE  30F1               	movlw	241
  2042  02EF                     u2257:	
  2043  02EF  0B89               	decfsz	9,f
  2044  02F0  2AEF               	goto	u2257
  2045  02F1  0BA8               	decfsz	??_main^(0+128),f
  2046  02F2  2AEF               	goto	u2257
  2047  02F3  0BA9               	decfsz	(??_main^(0+128)+1),f
  2048  02F4  2AEF               	goto	u2257
  2049                           
  2050                           ;main.c: 583: init_flag=0;
  2051  02F5  0020               	movlb	0	; select bank0
  2052  02F6  01D1               	clrf	_init_flag
  2053  02F7                     l2288:	
  2054                           ;main.c: 584: while (1) {
  2055                           
  2056                           
  2057                           ;main.c: 586: if (trigger == 1 && start_switchpushflag==1 && init_flag ==0)
  2058  02F7  0346               	decf	_trigger,w
  2059  02F8  1D03               	btfss	3,2
  2060  02F9  2AF7               	goto	l2288
  2061  02FA  0352               	decf	_start_switchpushflag,w
  2062  02FB  1D03               	btfss	3,2
  2063  02FC  2AF7               	goto	l2288
  2064  02FD  0851               	movf	_init_flag,w
  2065  02FE  1D03               	btfss	3,2
  2066  02FF  2AF7               	goto	l2288
  2067                           
  2068                           ;main.c: 587: {
  2069                           ;main.c: 593: if(v_adj_slow<1000)v_adj_slow=1000;
  2070  0300  3003               	movlw	3
  2071  0301  024A               	subwf	_v_adj_slow+1,w
  2072  0302  30E8               	movlw	232
  2073  0303  1903               	skipnz
  2074  0304  0249               	subwf	_v_adj_slow,w
  2075  0305  1803               	skipnc
  2076  0306  2AF7               	goto	l2288
  2077  0307  30E8               	movlw	232
  2078  0308  00C9               	movwf	_v_adj_slow
  2079  0309  3003               	movlw	3
  2080  030A  00CA               	movwf	_v_adj_slow+1
  2081  030B  2AF7               	goto	l2288
  2082  030C                     __end_of_main:	
  2083                           
  2084                           	psect	text1
  2085  0475                     __ptext1:	
  2086 ;; *************** function _SYSTEM_Initialize *****************
  2087 ;; Defined at:
  2088 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1
  2102 ;;      Params:         0       0       0
  2103 ;;      Locals:         0       0       0
  2104 ;;      Temps:          0       0       0
  2105 ;;      Totals:         0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    9
  2109 ;; This function calls:
  2110 ;;		_ADC_Initialize
  2111 ;;		_CMP1_Initialize
  2112 ;;		_OSCILLATOR_Initialize
  2113 ;;		_PIN_MANAGER_Initialize
  2114 ;;		_TMR0_Initialize
  2115 ;;		_TMR1_Initialize
  2116 ;;		_TMR2_Initialize
  2117 ;;		_WDT_Initialize
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _SYSTEM_Initialize
  2125  0475                     _SYSTEM_Initialize:	
  2126                           
  2127                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2131  0475  23B5               	fcall	_PIN_MANAGER_Initialize
  2132                           
  2133                           ;mcc.c: 54: OSCILLATOR_Initialize();
  2134  0476  24F9               	fcall	_OSCILLATOR_Initialize
  2135                           
  2136                           ;mcc.c: 55: WDT_Initialize();
  2137  0477  250F               	fcall	_WDT_Initialize
  2138                           
  2139                           ;mcc.c: 56: CMP1_Initialize();
  2140  0478  2505               	fcall	_CMP1_Initialize
  2141                           
  2142                           ;mcc.c: 57: ADC_Initialize();
  2143  0479  24BC               	fcall	_ADC_Initialize
  2144                           
  2145                           ;mcc.c: 58: TMR2_Initialize();
  2146  047A  2436               	fcall	_TMR2_Initialize
  2147                           
  2148                           ;mcc.c: 59: TMR1_Initialize();
  2149  047B  240A               	fcall	_TMR1_Initialize
  2150                           
  2151                           ;mcc.c: 60: TMR0_Initialize();
  2152  047C  2422               	fcall	_TMR0_Initialize
  2153                           
  2154                           ;mcc.c: 61: ADC_Initialize();
  2155  047D  24BC               	fcall	_ADC_Initialize
  2156                           
  2157                           ;mcc.c: 62: LATCbits.LATC4=1;
  2158  047E  0022               	movlb	2	; select bank2
  2159  047F  160E               	bsf	14,4	;volatile
  2160                           
  2161                           ;mcc.c: 63: LATCbits.LATC5=1;
  2162  0480  168E               	bsf	14,5	;volatile
  2163  0481  0008               	return
  2164  0482                     __end_of_SYSTEM_Initialize:	
  2165                           
  2166                           	psect	text2
  2167  050F                     __ptext2:	
  2168 ;; *************** function _WDT_Initialize *****************
  2169 ;; Defined at:
  2170 ;;		line 75 in file "mcc_generated_files/mcc.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;		None
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		wreg
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMMON   BANK0   BANK1
  2184 ;;      Params:         0       0       0
  2185 ;;      Locals:         0       0       0
  2186 ;;      Temps:          0       0       0
  2187 ;;      Totals:         0       0       0
  2188 ;;Total ram usage:        0 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    7
  2191 ;; This function calls:
  2192 ;;		Nothing
  2193 ;; This function is called by:
  2194 ;;		_SYSTEM_Initialize
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           
  2199                           ;psect for function _WDT_Initialize
  2200  050F                     _WDT_Initialize:	
  2201                           
  2202                           ;mcc.c: 78: WDTCON = 0x16;
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _WDT_Initialize: [wreg]
  2206  050F  3016               	movlw	22
  2207  0510  0021               	movlb	1	; select bank1
  2208  0511  0097               	movwf	23	;volatile
  2209  0512  0008               	return
  2210  0513                     __end_of_WDT_Initialize:	
  2211                           
  2212                           	psect	text3
  2213  0436                     __ptext3:	
  2214 ;; *************** function _TMR2_Initialize *****************
  2215 ;; Defined at:
  2216 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2, status,0, pclath, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1
  2230 ;;      Params:         0       0       0
  2231 ;;      Locals:         0       0       0
  2232 ;;      Temps:          0       0       0
  2233 ;;      Totals:         0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    8
  2237 ;; This function calls:
  2238 ;;		_TMR2_SetInterruptHandler
  2239 ;; This function is called by:
  2240 ;;		_SYSTEM_Initialize
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           
  2245                           ;psect for function _TMR2_Initialize
  2246  0436                     _TMR2_Initialize:	
  2247                           
  2248                           ;tmr2.c: 69: PR2 = 0x03;
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2252  0436  3003               	movlw	3
  2253  0437  0020               	movlb	0	; select bank0
  2254  0438  009B               	movwf	27	;volatile
  2255                           
  2256                           ;tmr2.c: 72: TMR2 = 0x00;
  2257  0439  019A               	clrf	26	;volatile
  2258                           
  2259                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  2260  043A  1091               	bcf	17,1	;volatile
  2261                           
  2262                           ;tmr2.c: 78: PIE1bits.TMR2IE = 1;
  2263  043B  0021               	movlb	1	; select bank1
  2264  043C  1491               	bsf	17,1	;volatile
  2265                           
  2266                           ;tmr2.c: 81: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  2267  043D  301D               	movlw	low _TMR2_DefaultInterruptHandler
  2268  043E  0020               	movlb	0	; select bank0
  2269  043F  00E5               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2270  0440  3005               	movlw	high _TMR2_DefaultInterruptHandler
  2271  0441  00E6               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2272  0442  24E1               	fcall	_TMR2_SetInterruptHandler
  2273                           
  2274                           ;tmr2.c: 84: T2CON = 0x7F;
  2275  0443  307F               	movlw	127
  2276  0444  0020               	movlb	0	; select bank0
  2277  0445  009C               	movwf	28	;volatile
  2278  0446  0008               	return
  2279  0447                     __end_of_TMR2_Initialize:	
  2280                           
  2281                           	psect	text4
  2282  04E1                     __ptext4:	
  2283 ;; *************** function _TMR2_SetInterruptHandler *****************
  2284 ;; Defined at:
  2285 ;;		line 140 in file "mcc_generated_files/tmr2.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
  2288 ;;		 -> INT_T2(1), TMR2_DefaultInterruptHandler(1), 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1
  2300 ;;      Params:         0       2       0
  2301 ;;      Locals:         0       0       0
  2302 ;;      Temps:          0       0       0
  2303 ;;      Totals:         0       2       0
  2304 ;;Total ram usage:        2 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    7
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_TMR2_Initialize
  2311 ;;		_main
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function _TMR2_SetInterruptHandler
  2317  04E1                     _TMR2_SetInterruptHandler:	
  2318                           
  2319                           ;tmr2.c: 141: TMR2_InterruptHandler = InterruptHandler;
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  2323  04E1  0020               	movlb	0	; select bank0
  2324  04E2  0866               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  2325  04E3  00D4               	movwf	_TMR2_InterruptHandler+1
  2326  04E4  0865               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  2327  04E5  00D3               	movwf	_TMR2_InterruptHandler
  2328  04E6  0008               	return
  2329  04E7                     __end_of_TMR2_SetInterruptHandler:	
  2330                           
  2331                           	psect	text5
  2332  040A                     __ptext5:	
  2333 ;; *************** function _TMR1_Initialize *****************
  2334 ;; Defined at:
  2335 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2, status,0, pclath, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1
  2349 ;;      Params:         0       0       0
  2350 ;;      Locals:         0       0       0
  2351 ;;      Temps:          0       0       0
  2352 ;;      Totals:         0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    8
  2356 ;; This function calls:
  2357 ;;		_TMR1_SetInterruptHandler
  2358 ;; This function is called by:
  2359 ;;		_SYSTEM_Initialize
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _TMR1_Initialize
  2365  040A                     _TMR1_Initialize:	
  2366                           
  2367                           ;tmr1.c: 69: T1GCON = 0x42;
  2368                           
  2369                           ;incstack = 0
  2370                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2371  040A  3042               	movlw	66
  2372  040B  0020               	movlb	0	; select bank0
  2373  040C  0099               	movwf	25	;volatile
  2374                           
  2375                           ;tmr1.c: 72: TMR1H = 0xFF;
  2376  040D  30FF               	movlw	255
  2377  040E  0097               	movwf	23	;volatile
  2378                           
  2379                           ;tmr1.c: 75: TMR1L = 0xFF;
  2380  040F  30FF               	movlw	255
  2381  0410  0096               	movwf	22	;volatile
  2382                           
  2383                           ;tmr1.c: 78: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  2384  0411  0817               	movf	23,w	;volatile
  2385  0412  00D8               	movwf	_timer1ReloadVal+1	;volatile
  2386  0413  0816               	movf	22,w	;volatile
  2387  0414  00D7               	movwf	_timer1ReloadVal	;volatile
  2388                           
  2389                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  2390  0415  1011               	bcf	17,0	;volatile
  2391                           
  2392                           ;tmr1.c: 84: PIE1bits.TMR1IE = 0;
  2393  0416  0021               	movlb	1	; select bank1
  2394  0417  1011               	bcf	17,0	;volatile
  2395                           
  2396                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  2397  0418  301E               	movlw	low _TMR1_DefaultInterruptHandler
  2398  0419  0020               	movlb	0	; select bank0
  2399  041A  00E5               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  2400  041B  3005               	movlw	high _TMR1_DefaultInterruptHandler
  2401  041C  00E6               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  2402  041D  24E7               	fcall	_TMR1_SetInterruptHandler
  2403                           
  2404                           ;tmr1.c: 90: T1CON = 0x25;
  2405  041E  3025               	movlw	37
  2406  041F  0020               	movlb	0	; select bank0
  2407  0420  0098               	movwf	24	;volatile
  2408  0421  0008               	return
  2409  0422                     __end_of_TMR1_Initialize:	
  2410                           
  2411                           	psect	text6
  2412  04E7                     __ptext6:	
  2413 ;; *************** function _TMR1_SetInterruptHandler *****************
  2414 ;; Defined at:
  2415 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
  2418 ;;		 -> tmr1cnt_func_init(1), TMR1_DefaultInterruptHandler(1), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON   BANK0   BANK1
  2430 ;;      Params:         0       2       0
  2431 ;;      Locals:         0       0       0
  2432 ;;      Temps:          0       0       0
  2433 ;;      Totals:         0       2       0
  2434 ;;Total ram usage:        2 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    7
  2437 ;; This function calls:
  2438 ;;		Nothing
  2439 ;; This function is called by:
  2440 ;;		_TMR1_Initialize
  2441 ;;		_main
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           
  2446                           ;psect for function _TMR1_SetInterruptHandler
  2447  04E7                     _TMR1_SetInterruptHandler:	
  2448                           
  2449                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
  2450                           
  2451                           ;incstack = 0
  2452                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  2453  04E7  0020               	movlb	0	; select bank0
  2454  04E8  0866               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  2455  04E9  00D6               	movwf	_TMR1_InterruptHandler+1
  2456  04EA  0865               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  2457  04EB  00D5               	movwf	_TMR1_InterruptHandler
  2458  04EC  0008               	return
  2459  04ED                     __end_of_TMR1_SetInterruptHandler:	
  2460                           
  2461                           	psect	text7
  2462  0422                     __ptext7:	
  2463 ;; *************** function _TMR0_Initialize *****************
  2464 ;; Defined at:
  2465 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1
  2479 ;;      Params:         0       0       0
  2480 ;;      Locals:         0       0       0
  2481 ;;      Temps:          0       1       0
  2482 ;;      Totals:         0       1       0
  2483 ;;Total ram usage:        1 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    8
  2486 ;; This function calls:
  2487 ;;		_TMR0_SetInterruptHandler
  2488 ;; This function is called by:
  2489 ;;		_SYSTEM_Initialize
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function _TMR0_Initialize
  2495  0422                     _TMR0_Initialize:	
  2496                           
  2497                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 & 0x3F));
  2498                           
  2499                           ;incstack = 0
  2500                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2501  0422  0021               	movlb	1	; select bank1
  2502  0423  0815               	movf	21,w	;volatile
  2503  0424  39C0               	andlw	192
  2504  0425  3811               	iorlw	17
  2505  0426  0095               	movwf	21	;volatile
  2506                           
  2507                           ;tmr0.c: 72: TMR0 = 0xff;
  2508  0427  30FF               	movlw	255
  2509  0428  0020               	movlb	0	; select bank0
  2510  0429  0095               	movwf	21	;volatile
  2511                           
  2512                           ;tmr0.c: 75: timer0ReloadVal= 0xce;
  2513  042A  30CE               	movlw	206
  2514  042B  00E7               	movwf	??_TMR0_Initialize
  2515  042C  0867               	movf	??_TMR0_Initialize,w
  2516  042D  00DD               	movwf	_timer0ReloadVal	;volatile
  2517                           
  2518                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2519  042E  110B               	bcf	11,2	;volatile
  2520                           
  2521                           ;tmr0.c: 81: INTCONbits.TMR0IE = 0;
  2522  042F  128B               	bcf	11,5	;volatile
  2523                           
  2524                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2525  0430  301F               	movlw	low _TMR0_DefaultInterruptHandler
  2526  0431  00E5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2527  0432  3005               	movlw	high _TMR0_DefaultInterruptHandler
  2528  0433  00E6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2529  0434  24ED               	fcall	_TMR0_SetInterruptHandler
  2530  0435  0008               	return
  2531  0436                     __end_of_TMR0_Initialize:	
  2532                           
  2533                           	psect	text8
  2534  04ED                     __ptext8:	
  2535 ;; *************** function _TMR0_SetInterruptHandler *****************
  2536 ;; Defined at:
  2537 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
  2540 ;;		 -> tmr0reloadcnt(1), TMR0_DefaultInterruptHandler(1), 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMMON   BANK0   BANK1
  2552 ;;      Params:         0       2       0
  2553 ;;      Locals:         0       0       0
  2554 ;;      Temps:          0       0       0
  2555 ;;      Totals:         0       2       0
  2556 ;;Total ram usage:        2 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    7
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_TMR0_Initialize
  2563 ;;		_main
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _TMR0_SetInterruptHandler
  2569  04ED                     _TMR0_SetInterruptHandler:	
  2570                           
  2571                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2575  04ED  0020               	movlb	0	; select bank0
  2576  04EE  0866               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2577  04EF  00DA               	movwf	_TMR0_InterruptHandler+1
  2578  04F0  0865               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2579  04F1  00D9               	movwf	_TMR0_InterruptHandler
  2580  04F2  0008               	return
  2581  04F3                     __end_of_TMR0_SetInterruptHandler:	
  2582                           
  2583                           	psect	text9
  2584  03B5                     __ptext9:	
  2585 ;; *************** function _PIN_MANAGER_Initialize *****************
  2586 ;; Defined at:
  2587 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0, pclath, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1
  2601 ;;      Params:         0       0       0
  2602 ;;      Locals:         0       0       0
  2603 ;;      Temps:          0       0       0
  2604 ;;      Totals:         0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    8
  2608 ;; This function calls:
  2609 ;;		_IOCAF2_SetInterruptHandler
  2610 ;; This function is called by:
  2611 ;;		_SYSTEM_Initialize
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _PIN_MANAGER_Initialize
  2617  03B5                     _PIN_MANAGER_Initialize:	
  2618                           
  2619                           ;pin_manager.c: 62: LATA = 0x00;
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2623  03B5  0022               	movlb	2	; select bank2
  2624  03B6  018C               	clrf	12	;volatile
  2625                           
  2626                           ;pin_manager.c: 63: LATC = 0x00;
  2627  03B7  018E               	clrf	14	;volatile
  2628                           
  2629                           ;pin_manager.c: 68: TRISA = 0x1F;
  2630  03B8  301F               	movlw	31
  2631  03B9  0021               	movlb	1	; select bank1
  2632  03BA  008C               	movwf	12	;volatile
  2633                           
  2634                           ;pin_manager.c: 69: TRISC = 0x0F;
  2635  03BB  300F               	movlw	15
  2636  03BC  008E               	movwf	14	;volatile
  2637                           
  2638                           ;pin_manager.c: 74: ANSELC = 0x0F;
  2639  03BD  300F               	movlw	15
  2640  03BE  0023               	movlb	3	; select bank3
  2641  03BF  008E               	movwf	14	;volatile
  2642                           
  2643                           ;pin_manager.c: 75: ANSELA = 0x13;
  2644  03C0  3013               	movlw	19
  2645  03C1  008C               	movwf	12	;volatile
  2646                           
  2647                           ;pin_manager.c: 80: WPUA = 0x00;
  2648  03C2  0024               	movlb	4	; select bank4
  2649  03C3  018C               	clrf	12	;volatile
  2650                           
  2651                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 1;
  2652  03C4  0021               	movlb	1	; select bank1
  2653  03C5  1795               	bsf	21,7	;volatile
  2654                           
  2655                           ;pin_manager.c: 88: APFCON = 0x00;
  2656  03C6  0022               	movlb	2	; select bank2
  2657  03C7  019D               	clrf	29	;volatile
  2658                           
  2659                           ;pin_manager.c: 94: IOCAFbits.IOCAF2 = 0;
  2660  03C8  0027               	movlb	7	; select bank7
  2661  03C9  1113               	bcf	19,2	;volatile
  2662                           
  2663                           ;pin_manager.c: 96: IOCANbits.IOCAN2 = 1;
  2664  03CA  1512               	bsf	18,2	;volatile
  2665                           
  2666                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  2667  03CB  1511               	bsf	17,2	;volatile
  2668                           
  2669                           ;pin_manager.c: 103: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  2670  03CC  3020               	movlw	low _IOCAF2_DefaultInterruptHandler
  2671  03CD  0020               	movlb	0	; select bank0
  2672  03CE  00E5               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  2673  03CF  3005               	movlw	high _IOCAF2_DefaultInterruptHandler
  2674  03D0  00E6               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  2675  03D1  24F3               	fcall	_IOCAF2_SetInterruptHandler
  2676                           
  2677                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  2678  03D2  158B               	bsf	11,3	;volatile
  2679  03D3  0008               	return
  2680  03D4                     __end_of_PIN_MANAGER_Initialize:	
  2681                           
  2682                           	psect	text10
  2683  04F3                     __ptext10:	
  2684 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  2685 ;; Defined at:
  2686 ;;		line 137 in file "mcc_generated_files/pin_manager.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
  2689 ;;		 -> INT_RA2(1), IOCAF2_DefaultInterruptHandler(1), 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;		None
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1
  2701 ;;      Params:         0       2       0
  2702 ;;      Locals:         0       0       0
  2703 ;;      Temps:          0       0       0
  2704 ;;      Totals:         0       2       0
  2705 ;;Total ram usage:        2 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    7
  2708 ;; This function calls:
  2709 ;;		Nothing
  2710 ;; This function is called by:
  2711 ;;		_PIN_MANAGER_Initialize
  2712 ;;		_main
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           
  2717                           ;psect for function _IOCAF2_SetInterruptHandler
  2718  04F3                     _IOCAF2_SetInterruptHandler:	
  2719                           
  2720                           ;pin_manager.c: 138: IOCAF2_InterruptHandler = InterruptHandler;
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  2724  04F3  0020               	movlb	0	; select bank0
  2725  04F4  0866               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  2726  04F5  00DC               	movwf	_IOCAF2_InterruptHandler+1
  2727  04F6  0865               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  2728  04F7  00DB               	movwf	_IOCAF2_InterruptHandler
  2729  04F8  0008               	return
  2730  04F9                     __end_of_IOCAF2_SetInterruptHandler:	
  2731                           
  2732                           	psect	text11
  2733  04F9                     __ptext11:	
  2734 ;; *************** function _OSCILLATOR_Initialize *****************
  2735 ;; Defined at:
  2736 ;;		line 67 in file "mcc_generated_files/mcc.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1
  2750 ;;      Params:         0       0       0
  2751 ;;      Locals:         0       0       0
  2752 ;;      Temps:          0       0       0
  2753 ;;      Totals:         0       0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    7
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_SYSTEM_Initialize
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           
  2765                           ;psect for function _OSCILLATOR_Initialize
  2766  04F9                     _OSCILLATOR_Initialize:	
  2767                           
  2768                           ;mcc.c: 70: OSCCON = 0x78;
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2772  04F9  3078               	movlw	120
  2773  04FA  0021               	movlb	1	; select bank1
  2774  04FB  0099               	movwf	25	;volatile
  2775                           
  2776                           ;mcc.c: 72: BORCON = 0x00;
  2777  04FC  0022               	movlb	2	; select bank2
  2778  04FD  0196               	clrf	22	;volatile
  2779  04FE  0008               	return
  2780  04FF                     __end_of_OSCILLATOR_Initialize:	
  2781                           
  2782                           	psect	text12
  2783  0505                     __ptext12:	
  2784 ;; *************** function _CMP1_Initialize *****************
  2785 ;; Defined at:
  2786 ;;		line 58 in file "mcc_generated_files/cmp1.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1
  2800 ;;      Params:         0       0       0
  2801 ;;      Locals:         0       0       0
  2802 ;;      Temps:          0       0       0
  2803 ;;      Totals:         0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    7
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_SYSTEM_Initialize
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           
  2815                           ;psect for function _CMP1_Initialize
  2816  0505                     _CMP1_Initialize:	
  2817                           
  2818                           ;cmp1.c: 62: CM1CON0 = 0x84;
  2819                           
  2820                           ;incstack = 0
  2821                           ; Regs used in _CMP1_Initialize: [wreg+status,2]
  2822  0505  3084               	movlw	132
  2823  0506  0022               	movlb	2	; select bank2
  2824  0507  0091               	movwf	17	;volatile
  2825                           
  2826                           ;cmp1.c: 65: CM1CON1 = 0x00;
  2827  0508  0192               	clrf	18	;volatile
  2828  0509  0008               	return
  2829  050A                     __end_of_CMP1_Initialize:	
  2830                           
  2831                           	psect	text13
  2832  04BC                     __ptext13:	
  2833 ;; *************** function _ADC_Initialize *****************
  2834 ;; Defined at:
  2835 ;;		line 65 in file "mcc_generated_files/adc.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1
  2849 ;;      Params:         0       0       0
  2850 ;;      Locals:         0       0       0
  2851 ;;      Temps:          0       0       0
  2852 ;;      Totals:         0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    7
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_SYSTEM_Initialize
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _ADC_Initialize
  2865  04BC                     _ADC_Initialize:	
  2866                           
  2867                           ;adc.c: 70: ADCON0 = 0x01;
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  2871  04BC  3001               	movlw	1
  2872  04BD  0021               	movlb	1	; select bank1
  2873  04BE  009D               	movwf	29	;volatile
  2874                           
  2875                           ;adc.c: 73: ADCON1 = 0xF0;
  2876  04BF  30F0               	movlw	240
  2877  04C0  009E               	movwf	30	;volatile
  2878                           
  2879                           ;adc.c: 76: ADCON2 = 0x00;
  2880  04C1  019F               	clrf	31	;volatile
  2881                           
  2882                           ;adc.c: 79: ADRESL = 0x00;
  2883  04C2  019B               	clrf	27	;volatile
  2884                           
  2885                           ;adc.c: 82: ADRESH = 0x00;
  2886  04C3  019C               	clrf	28	;volatile
  2887  04C4  0008               	return
  2888  04C5                     __end_of_ADC_Initialize:	
  2889                           
  2890                           	psect	intentry
  2891  0004                     __pintentry:	
  2892 ;; *************** function _INTERRUPT_InterruptManager *****************
  2893 ;; Defined at:
  2894 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1
  2908 ;;      Params:         0       0       0
  2909 ;;      Locals:         0       0       0
  2910 ;;      Temps:          0       1       0
  2911 ;;      Totals:         0       1       0
  2912 ;;Total ram usage:        1 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    6
  2915 ;; This function calls:
  2916 ;;		_PIN_MANAGER_IOC
  2917 ;;		_TMR0_ISR
  2918 ;;		_TMR1_ISR
  2919 ;;		_TMR2_ISR
  2920 ;; This function is called by:
  2921 ;;		Interrupt level 1
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925  0004                     _INTERRUPT_InterruptManager:	
  2926                           
  2927                           ;incstack = 0
  2928  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2929                           
  2930                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  2931  0005  3180               	pagesel	$
  2932  0006  0020               	movlb	0	; select bank0
  2933  0007  087F               	movf	127,w
  2934  0008  00E4               	movwf	??_INTERRUPT_InterruptManager
  2935                           
  2936                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2937  0009  1A8B               	btfsc	11,5	;volatile
  2938  000A  1D0B               	btfss	11,2	;volatile
  2939  000B  280E               	goto	i1l185
  2940                           
  2941                           ;interrupt_manager.c: 56: {
  2942                           ;interrupt_manager.c: 57: TMR0_ISR();
  2943  000C  2447               	fcall	_TMR0_ISR
  2944                           
  2945                           ;interrupt_manager.c: 58: }
  2946  000D  2824               	goto	i1l195
  2947  000E                     i1l185:	
  2948                           
  2949                           ;interrupt_manager.c: 59: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  2950  000E  198B               	btfsc	11,3	;volatile
  2951  000F  1C0B               	btfss	11,0	;volatile
  2952  0010  2813               	goto	i1l187
  2953                           
  2954                           ;interrupt_manager.c: 60: {
  2955                           ;interrupt_manager.c: 61: PIN_MANAGER_IOC();
  2956  0011  250A               	fcall	_PIN_MANAGER_IOC
  2957                           
  2958                           ;interrupt_manager.c: 62: }
  2959  0012  2824               	goto	i1l195
  2960  0013                     i1l187:	
  2961                           
  2962                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1)
  2963  0013  1F0B               	btfss	11,6	;volatile
  2964  0014  2824               	goto	i1l195
  2965                           
  2966                           ;interrupt_manager.c: 64: {
  2967                           ;interrupt_manager.c: 65: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  2968  0015  0021               	movlb	1	; select bank1
  2969  0016  1C11               	btfss	17,0	;volatile
  2970  0017  281D               	goto	i1l190
  2971  0018  0020               	movlb	0	; select bank0
  2972  0019  1C11               	btfss	17,0	;volatile
  2973  001A  281D               	goto	i1l190
  2974                           
  2975                           ;interrupt_manager.c: 66: {
  2976                           ;interrupt_manager.c: 67: TMR1_ISR();
  2977  001B  24C5               	fcall	_TMR1_ISR
  2978                           
  2979                           ;interrupt_manager.c: 68: }
  2980  001C  2824               	goto	i1l195
  2981  001D                     i1l190:	
  2982                           
  2983                           ;interrupt_manager.c: 69: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  2984  001D  0021               	movlb	1	; select bank1
  2985  001E  1C91               	btfss	17,1	;volatile
  2986  001F  2824               	goto	i1l195
  2987  0020  0020               	movlb	0	; select bank0
  2988  0021  1C91               	btfss	17,1	;volatile
  2989  0022  2824               	goto	i1l195
  2990                           
  2991                           ;interrupt_manager.c: 70: {
  2992                           ;interrupt_manager.c: 71: TMR2_ISR();
  2993  0023  2513               	fcall	_TMR2_ISR
  2994  0024                     i1l195:	
  2995                           ;interrupt_manager.c: 78: else
  2996                           ;interrupt_manager.c: 79: {
  2997                           
  2998                           ;interrupt_manager.c: 76: }
  2999                           ;interrupt_manager.c: 77: }
  3000                           
  3001                           ;interrupt_manager.c: 73: else
  3002                           ;interrupt_manager.c: 74: {
  3003                           
  3004                           ;interrupt_manager.c: 72: }
  3005                           
  3006  0024  0020               	movlb	0	; select bank0
  3007  0025  0864               	movf	??_INTERRUPT_InterruptManager,w
  3008  0026  00FF               	movwf	127
  3009  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3010  0028  0009               	retfie
  3011  0029                     __end_of_INTERRUPT_InterruptManager:	
  3012                           
  3013                           	psect	text15
  3014  0513                     __ptext15:	
  3015 ;; *************** function _TMR2_ISR *****************
  3016 ;; Defined at:
  3017 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1
  3031 ;;      Params:         0       0       0
  3032 ;;      Locals:         0       0       0
  3033 ;;      Temps:          0       0       0
  3034 ;;      Totals:         0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    5
  3038 ;; This function calls:
  3039 ;;		_TMR2_CallBack
  3040 ;; This function is called by:
  3041 ;;		_INTERRUPT_InterruptManager
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _TMR2_ISR
  3047  0513                     _TMR2_ISR:	
  3048                           
  3049                           ;tmr2.c: 123: PIR1bits.TMR2IF = 0;
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _TMR2_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3053  0513  0020               	movlb	0	; select bank0
  3054  0514  1091               	bcf	17,1	;volatile
  3055                           
  3056                           ;tmr2.c: 127: TMR2_CallBack();
  3057  0515  249B               	fcall	_TMR2_CallBack
  3058  0516  0008               	return
  3059  0517                     __end_of_TMR2_ISR:	
  3060                           
  3061                           	psect	text16
  3062  049B                     __ptext16:	
  3063 ;; *************** function _TMR2_CallBack *****************
  3064 ;; Defined at:
  3065 ;;		line 130 in file "mcc_generated_files/tmr2.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1
  3079 ;;      Params:         0       0       0
  3080 ;;      Locals:         0       0       0
  3081 ;;      Temps:          0       0       0
  3082 ;;      Totals:         0       0       0
  3083 ;;Total ram usage:        0 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    4
  3086 ;; This function calls:
  3087 ;;		Absolute function
  3088 ;;		_INT_T2
  3089 ;;		_TMR2_DefaultInterruptHandler
  3090 ;; This function is called by:
  3091 ;;		_TMR2_ISR
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _TMR2_CallBack
  3097  049B                     _TMR2_CallBack:	
  3098                           
  3099                           ;tmr2.c: 134: if(TMR2_InterruptHandler)
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _TMR2_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3103  049B  0020               	movlb	0	; select bank0
  3104  049C  0853               	movf	_TMR2_InterruptHandler,w
  3105  049D  0454               	iorwf	_TMR2_InterruptHandler+1,w
  3106  049E  1903               	btfsc	3,2
  3107  049F  0008               	return
  3108                           
  3109                           ;tmr2.c: 135: {
  3110                           ;tmr2.c: 136: TMR2_InterruptHandler();
  3111  04A0  0854               	movf	_TMR2_InterruptHandler+1,w
  3112  04A1  008A               	movwf	10
  3113  04A2  0853               	movf	_TMR2_InterruptHandler,w
  3114  04A3  000A               	callw
  3115  04A4  3184               	pagesel	$
  3116  04A5  0008               	return
  3117  04A6                     __end_of_TMR2_CallBack:	
  3118                           
  3119                           	psect	text17
  3120  0043                     __ptext17:	
  3121 ;; *************** function _INT_T2 *****************
  3122 ;; Defined at:
  3123 ;;		line 146 in file "main.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               1   13[COMMON] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON   BANK0   BANK1
  3137 ;;      Params:         0       0       0
  3138 ;;      Locals:         1       0       0
  3139 ;;      Temps:          0       4       0
  3140 ;;      Totals:         1       4       0
  3141 ;;Total ram usage:        5 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		_ADC_GetConversion
  3146 ;;		___lwdiv
  3147 ;;		_led_blink
  3148 ;;		_rpm_celiang
  3149 ;;		_tmr1gate_func_init
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;;		_TMR2_CallBack
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           
  3157                           ;psect for function _INT_T2
  3158  0043                     _INT_T2:	
  3159                           
  3160                           ;main.c: 149: t0_tick++;
  3161                           
  3162                           ;incstack = 0
  3163                           ; Regs used in _INT_T2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3164  0043  3001               	movlw	1
  3165  0044  0020               	movlb	0	; select bank0
  3166  0045  07A6               	addwf	_t0_tick,f
  3167  0046  3000               	movlw	0
  3168  0047  3DA7               	addwfc	_t0_tick+1,f
  3169                           
  3170                           ;main.c: 150: if(t0_tick>1)
  3171  0048  3000               	movlw	0
  3172  0049  0227               	subwf	_t0_tick+1,w
  3173  004A  3002               	movlw	2
  3174  004B  1903               	skipnz
  3175  004C  0226               	subwf	_t0_tick,w
  3176  004D  1C03               	skipc
  3177  004E  2853               	goto	i1l1810
  3178                           
  3179                           ;main.c: 151: {
  3180                           ;main.c: 152: led_blink();
  3181  004F  2275               	fcall	_led_blink
  3182                           
  3183                           ;main.c: 153: t0_tick=0;
  3184  0050  0020               	movlb	0	; select bank0
  3185  0051  01A6               	clrf	_t0_tick
  3186  0052  01A7               	clrf	_t0_tick+1
  3187  0053                     i1l1810:	
  3188                           
  3189                           ;main.c: 154: }
  3190                           ;main.c: 158: if(init_flag ==0 && start_switchpushflag==1 && trigger ==0 )
  3191  0053  0851               	movf	_init_flag,w
  3192  0054  1D03               	btfss	3,2
  3193  0055  2863               	goto	i1l1818
  3194  0056  0352               	decf	_start_switchpushflag,w
  3195  0057  1D03               	btfss	3,2
  3196  0058  2863               	goto	i1l1818
  3197  0059  0846               	movf	_trigger,w
  3198  005A  1D03               	btfss	3,2
  3199  005B  2863               	goto	i1l1818
  3200                           
  3201                           ;main.c: 159: {
  3202                           ;main.c: 160: tmr1gate_func_init ();
  3203  005C  2467               	fcall	_tmr1gate_func_init
  3204                           
  3205                           ;main.c: 161: cmp1cnt=rpm_celiang();
  3206  005D  230C               	fcall	_rpm_celiang
  3207  005E  087C               	movf	?_rpm_celiang+1,w
  3208  005F  0020               	movlb	0	; select bank0
  3209  0060  00A5               	movwf	_cmp1cnt+1
  3210  0061  087B               	movf	?_rpm_celiang,w
  3211  0062  00A4               	movwf	_cmp1cnt
  3212  0063                     i1l1818:	
  3213                           
  3214                           ;main.c: 162: }
  3215                           ;main.c: 163: if(cmp1cnt !=0)
  3216  0063  0824               	movf	_cmp1cnt,w
  3217  0064  0425               	iorwf	_cmp1cnt+1,w
  3218  0065  1903               	btfsc	3,2
  3219  0066  286D               	goto	i1l1824
  3220                           
  3221                           ;main.c: 164: {
  3222                           ;main.c: 165: cnt_rpmcapture=cmp1cnt ;
  3223  0067  0825               	movf	_cmp1cnt+1,w
  3224  0068  00A3               	movwf	_cnt_rpmcapture+1
  3225  0069  0824               	movf	_cmp1cnt,w
  3226  006A  00A2               	movwf	_cnt_rpmcapture
  3227                           
  3228                           ;main.c: 166: cmp1cnt=0;
  3229  006B  01A4               	clrf	_cmp1cnt
  3230  006C  01A5               	clrf	_cmp1cnt+1
  3231  006D                     i1l1824:	
  3232                           ;main.c: 172: else
  3233                           ;main.c: 173: {
  3234                           
  3235                           ;main.c: 171: }
  3236                           
  3237                           
  3238                           ;main.c: 178: }
  3239                           ;main.c: 179: cnt_adc++;
  3240  006D  3001               	movlw	1
  3241  006E  07CB               	addwf	_cnt_adc,f
  3242  006F  3000               	movlw	0
  3243  0070  3DCC               	addwfc	_cnt_adc+1,f
  3244                           
  3245                           ;main.c: 180: if(cnt_adc>250)
  3246  0071  3000               	movlw	0
  3247  0072  024C               	subwf	_cnt_adc+1,w
  3248  0073  30FB               	movlw	251
  3249  0074  1903               	skipnz
  3250  0075  024B               	subwf	_cnt_adc,w
  3251  0076  1C03               	skipc
  3252  0077  28E3               	goto	i1l1854
  3253                           
  3254                           ;main.c: 181: {
  3255                           ;main.c: 182: cnt_adc=0;
  3256  0078  01CB               	clrf	_cnt_adc
  3257  0079  01CC               	clrf	_cnt_adc+1
  3258                           
  3259                           ;main.c: 183: if(v_adj==0)
  3260  007A  0834               	movf	_v_adj,w
  3261  007B  0435               	iorwf	_v_adj+1,w
  3262  007C  1D03               	btfss	3,2
  3263  007D  2885               	goto	i1l1832
  3264                           
  3265                           ;main.c: 184: {
  3266                           ;main.c: 185: v_adj = ADC_GetConversion(ADJ);
  3267  007E  3007               	movlw	7
  3268  007F  23F1               	fcall	_ADC_GetConversion
  3269  0080  0871               	movf	?_ADC_GetConversion+1,w
  3270  0081  0020               	movlb	0	; select bank0
  3271  0082  00B5               	movwf	_v_adj+1
  3272  0083  0870               	movf	?_ADC_GetConversion,w
  3273  0084  28D4               	goto	L1
  3274  0085                     i1l1832:	
  3275                           ;main.c: 186: }
  3276                           
  3277                           
  3278                           ;main.c: 187: else
  3279                           ;main.c: 188: {
  3280                           ;main.c: 190: for(uint8_t i=0;i<4;i++)
  3281  0085  01FD               	clrf	INT_T2@i
  3282  0086  3004               	movlw	4
  3283  0087  027D               	subwf	INT_T2@i,w
  3284  0088  1803               	btfsc	3,0
  3285  0089  289D               	goto	i1l1844
  3286  008A                     i1l1838:	
  3287                           
  3288                           ;main.c: 191: {
  3289                           ;main.c: 192: v_adj_filter[i]=ADC_GetConversion(ADJ);
  3290  008A  3007               	movlw	7
  3291  008B  23F1               	fcall	_ADC_GetConversion
  3292  008C  357D               	lslf	INT_T2@i,w
  3293  008D  3EA0               	addlw	(low (_v_adj_filter| 0))& (0+255)
  3294  008E  0086               	movwf	6
  3295  008F  0187               	clrf	7
  3296  0090  0870               	movf	?_ADC_GetConversion,w
  3297  0091  3FC0               	movwi [0]fsr1
  3298  0092  0871               	movf	?_ADC_GetConversion+1,w
  3299  0093  3FC1               	movwi [1]fsr1
  3300  0094  3001               	movlw	1
  3301  0095  0020               	movlb	0	; select bank0
  3302  0096  00E0               	movwf	??_INT_T2
  3303  0097  0860               	movf	??_INT_T2,w
  3304  0098  07FD               	addwf	INT_T2@i,f
  3305  0099  3004               	movlw	4
  3306  009A  027D               	subwf	INT_T2@i,w
  3307  009B  1C03               	skipc
  3308  009C  288A               	goto	i1l1838
  3309  009D                     i1l1844:	
  3310                           
  3311                           ;main.c: 193: }
  3312                           ;main.c: 194: if(v_adj_filter[0]-v_adj >50 || v_adj-v_adj_filter[0] >50)
  3313  009D  0934               	comf	_v_adj,w
  3314  009E  00E0               	movwf	??_INT_T2
  3315  009F  0935               	comf	_v_adj+1,w
  3316  00A0  00E1               	movwf	??_INT_T2+1
  3317  00A1  0AE0               	incf	??_INT_T2,f
  3318  00A2  1903               	skipnz
  3319  00A3  0AE1               	incf	??_INT_T2+1,f
  3320  00A4  0021               	movlb	1	; select bank1
  3321  00A5  0820               	movf	_v_adj_filter^(0+128),w
  3322  00A6  0020               	movlb	0	; select bank0
  3323  00A7  0760               	addwf	??_INT_T2,w
  3324  00A8  00E2               	movwf	??_INT_T2+2
  3325  00A9  0021               	movlb	1	; select bank1
  3326  00AA  0821               	movf	(_v_adj_filter+1)^(0+128),w
  3327  00AB  0020               	movlb	0	; select bank0
  3328  00AC  3D61               	addwfc	??_INT_T2+1,w
  3329  00AD  00E3               	movwf	??_INT_T2+3
  3330  00AE  3000               	movlw	0
  3331  00AF  0263               	subwf	??_INT_T2+3,w
  3332  00B0  3033               	movlw	51
  3333  00B1  1903               	skipnz
  3334  00B2  0262               	subwf	??_INT_T2+2,w
  3335  00B3  1803               	skipnc
  3336  00B4  28CD               	goto	i1l1848
  3337  00B5  0021               	movlb	1	; select bank1
  3338  00B6  0920               	comf	_v_adj_filter^(0+128),w
  3339  00B7  0020               	movlb	0	; select bank0
  3340  00B8  00E0               	movwf	??_INT_T2
  3341  00B9  0021               	movlb	1	; select bank1
  3342  00BA  0921               	comf	(_v_adj_filter+1)^(0+128),w
  3343  00BB  0020               	movlb	0	; select bank0
  3344  00BC  00E1               	movwf	??_INT_T2+1
  3345  00BD  0AE0               	incf	??_INT_T2,f
  3346  00BE  1903               	skipnz
  3347  00BF  0AE1               	incf	??_INT_T2+1,f
  3348  00C0  0834               	movf	_v_adj,w
  3349  00C1  0760               	addwf	??_INT_T2,w
  3350  00C2  00E2               	movwf	??_INT_T2+2
  3351  00C3  0835               	movf	_v_adj+1,w
  3352  00C4  3D61               	addwfc	??_INT_T2+1,w
  3353  00C5  00E3               	movwf	??_INT_T2+3
  3354  00C6  3000               	movlw	0
  3355  00C7  0263               	subwf	??_INT_T2+3,w
  3356  00C8  3033               	movlw	51
  3357  00C9  1903               	skipnz
  3358  00CA  0262               	subwf	??_INT_T2+2,w
  3359  00CB  1C03               	skipc
  3360  00CC  28D5               	goto	i1l1850
  3361  00CD                     i1l1848:	
  3362                           
  3363                           ;main.c: 195: {
  3364                           ;main.c: 196: v_adj=v_adj_filter[0];
  3365  00CD  0021               	movlb	1	; select bank1
  3366  00CE  0821               	movf	(_v_adj_filter+1)^(0+128),w
  3367  00CF  0020               	movlb	0	; select bank0
  3368  00D0  00B5               	movwf	_v_adj+1
  3369  00D1  0021               	movlb	1	; select bank1
  3370  00D2  0820               	movf	_v_adj_filter^(0+128),w
  3371  00D3  0020               	movlb	0	; select bank0
  3372  00D4                     L1:	
  3373  00D4  00B4               	movwf	_v_adj
  3374  00D5                     i1l1850:	
  3375                           
  3376                           ;main.c: 197: }
  3377                           ;main.c: 198: }
  3378                           ;main.c: 200: v_ntc = ADC_GetConversion(NTC);
  3379  00D5  3004               	movlw	4
  3380  00D6  23F1               	fcall	_ADC_GetConversion
  3381  00D7  0871               	movf	?_ADC_GetConversion+1,w
  3382  00D8  0020               	movlb	0	; select bank0
  3383  00D9  00B3               	movwf	_v_ntc+1
  3384  00DA  0870               	movf	?_ADC_GetConversion,w
  3385  00DB  00B2               	movwf	_v_ntc
  3386                           
  3387                           ;main.c: 203: v_test = ADC_GetConversion(TEST);
  3388  00DC  3005               	movlw	5
  3389  00DD  23F1               	fcall	_ADC_GetConversion
  3390  00DE  0871               	movf	?_ADC_GetConversion+1,w
  3391  00DF  0020               	movlb	0	; select bank0
  3392  00E0  00CE               	movwf	_v_test+1
  3393  00E1  0870               	movf	?_ADC_GetConversion,w
  3394  00E2  00CD               	movwf	_v_test
  3395  00E3                     i1l1854:	
  3396                           
  3397                           ;main.c: 204: }
  3398                           ;main.c: 225: if(init_flag ==0 && start_switchpushflag==1 )
  3399  00E3  0851               	movf	_init_flag,w
  3400  00E4  1D03               	btfss	3,2
  3401  00E5  297A               	goto	i1l460
  3402  00E6  0352               	decf	_start_switchpushflag,w
  3403  00E7  1D03               	btfss	3,2
  3404  00E8  297A               	goto	i1l460
  3405                           
  3406                           ;main.c: 226: {
  3407                           ;main.c: 228: if (ra2sta == PORTAbits.RA2)
  3408  00E9  0C0C               	rrf	12,w	;volatile
  3409  00EA  0C89               	rrf	9,f
  3410  00EB  3901               	andlw	1
  3411  00EC  0643               	xorwf	_ra2sta,w
  3412  00ED  1D03               	skipz
  3413  00EE  28F8               	goto	i1l1864
  3414                           
  3415                           ;main.c: 229: {
  3416                           ;main.c: 230: if (count_sta < 250)
  3417  00EF  30FA               	movlw	250
  3418  00F0  0244               	subwf	_count_sta,w
  3419  00F1  1803               	skipnc
  3420  00F2  28FD               	goto	i1l463
  3421                           
  3422                           ;main.c: 231: {
  3423                           ;main.c: 232: count_sta++;
  3424  00F3  3001               	movlw	1
  3425  00F4  00E0               	movwf	??_INT_T2
  3426  00F5  0860               	movf	??_INT_T2,w
  3427  00F6  07C4               	addwf	_count_sta,f
  3428                           
  3429                           ;main.c: 233: }
  3430                           ;main.c: 234: }
  3431  00F7  28FD               	goto	i1l463
  3432  00F8                     i1l1864:	
  3433                           
  3434                           ;main.c: 235: else
  3435                           ;main.c: 236: {
  3436                           ;main.c: 237: count_sta = 0;
  3437  00F8  01C4               	clrf	_count_sta
  3438                           
  3439                           ;main.c: 238: ra2sta = PORTAbits.RA2;
  3440  00F9  3000               	movlw	0
  3441  00FA  190C               	btfsc	12,2	;volatile
  3442  00FB  3001               	movlw	1
  3443  00FC  00C3               	movwf	_ra2sta
  3444  00FD                     i1l463:	
  3445                           
  3446                           ;main.c: 239: }
  3447                           ;main.c: 241: if (count_sta >= 40)
  3448  00FD  3028               	movlw	40
  3449  00FE  0244               	subwf	_count_sta,w
  3450  00FF  1C03               	skipc
  3451  0100  290B               	goto	i1l1876
  3452                           
  3453                           ;main.c: 242: {
  3454                           ;main.c: 243: v_adj_slow = 6000;
  3455  0101  3070               	movlw	112
  3456  0102  00C9               	movwf	_v_adj_slow
  3457  0103  3017               	movlw	23
  3458  0104  00CA               	movwf	_v_adj_slow+1
  3459                           
  3460                           ;main.c: 244: cmp1cnt=0;
  3461  0105  01A4               	clrf	_cmp1cnt
  3462  0106  01A5               	clrf	_cmp1cnt+1
  3463                           
  3464                           ;main.c: 245: cnt_rpmcapture=0;
  3465  0107  01A2               	clrf	_cnt_rpmcapture
  3466  0108  01A3               	clrf	_cnt_rpmcapture+1
  3467                           
  3468                           ;main.c: 246: Motor_run_status=Init_status;
  3469  0109  01B9               	clrf	_Motor_run_status
  3470                           
  3471                           ;main.c: 249: }
  3472  010A  297A               	goto	i1l460
  3473  010B                     i1l1876:	
  3474                           
  3475                           ;main.c: 250: else
  3476                           ;main.c: 251: {
  3477                           ;main.c: 294: if(v_adj<=950)
  3478  010B  3003               	movlw	3
  3479  010C  0235               	subwf	_v_adj+1,w
  3480  010D  30B7               	movlw	183
  3481  010E  1903               	skipnz
  3482  010F  0234               	subwf	_v_adj,w
  3483  0110  1803               	skipnc
  3484  0111  2931               	goto	i1l1880
  3485                           
  3486                           ;main.c: 295: {
  3487                           ;main.c: 297: reloading_val=(uint16_t) (5270- v_adj*4/3) ;
  3488  0112  3003               	movlw	3
  3489  0113  00F0               	movwf	___lwdiv@divisor
  3490  0114  3000               	movlw	0
  3491  0115  00F1               	movwf	___lwdiv@divisor+1
  3492  0116  0835               	movf	_v_adj+1,w
  3493  0117  00E1               	movwf	??_INT_T2+1
  3494  0118  0834               	movf	_v_adj,w
  3495  0119  00E0               	movwf	??_INT_T2
  3496  011A  35E0               	lslf	??_INT_T2,f
  3497  011B  0DE1               	rlf	??_INT_T2+1,f
  3498  011C  35E0               	lslf	??_INT_T2,f
  3499  011D  0DE1               	rlf	??_INT_T2+1,f
  3500  011E  0860               	movf	??_INT_T2,w
  3501  011F  00F2               	movwf	___lwdiv@dividend
  3502  0120  0861               	movf	??_INT_T2+1,w
  3503  0121  00F3               	movwf	___lwdiv@dividend+1
  3504  0122  2381               	fcall	___lwdiv
  3505  0123  0970               	comf	?___lwdiv,w
  3506  0124  0020               	movlb	0	; select bank0
  3507  0125  00E2               	movwf	??_INT_T2+2
  3508  0126  0971               	comf	?___lwdiv+1,w
  3509  0127  00E3               	movwf	??_INT_T2+3
  3510  0128  0AE2               	incf	??_INT_T2+2,f
  3511  0129  1903               	skipnz
  3512  012A  0AE3               	incf	??_INT_T2+3,f
  3513  012B  0862               	movf	??_INT_T2+2,w
  3514  012C  3E96               	addlw	150
  3515  012D  00C7               	movwf	_reloading_val
  3516  012E  3014               	movlw	20
  3517  012F  3D63               	addwfc	??_INT_T2+3,w
  3518  0130  2934               	goto	L2
  3519  0131                     i1l1880:	
  3520                           ;main.c: 298: }
  3521                           
  3522                           
  3523                           ;main.c: 301: else
  3524                           ;main.c: 302: {
  3525                           ;main.c: 303: reloading_val=4000;
  3526  0131  30A0               	movlw	160
  3527  0132  00C7               	movwf	_reloading_val
  3528  0133  300F               	movlw	15
  3529  0134                     L2:	
  3530  0134  00C8               	movwf	_reloading_val+1
  3531                           
  3532                           ;main.c: 309: }
  3533                           ;main.c: 311: if (v_adj_slow > reloading_val)
  3534  0135  084A               	movf	_v_adj_slow+1,w
  3535  0136  0248               	subwf	_reloading_val+1,w
  3536  0137  1D03               	skipz
  3537  0138  293B               	goto	u151_25
  3538  0139  0849               	movf	_v_adj_slow,w
  3539  013A  0247               	subwf	_reloading_val,w
  3540  013B                     u151_25:	
  3541  013B  1803               	skipnc
  3542  013C  2947               	goto	i1l1890
  3543                           
  3544                           ;main.c: 312: {
  3545                           ;main.c: 313: if (count < 1)
  3546  013D  0845               	movf	_count,w
  3547  013E  1903               	btfsc	3,2
  3548  013F  2966               	goto	i1l1900
  3549                           
  3550                           ;main.c: 315: else
  3551                           ;main.c: 316: {
  3552                           ;main.c: 317: v_adj_slow=v_adj_slow-2;
  3553                           
  3554                           ;main.c: 314: count++;
  3555  0140  0849               	movf	_v_adj_slow,w
  3556  0141  3EFE               	addlw	254
  3557  0142  00C9               	movwf	_v_adj_slow
  3558  0143  30FF               	movlw	255
  3559  0144  3D4A               	addwfc	_v_adj_slow+1,w
  3560  0145  00CA               	movwf	_v_adj_slow+1
  3561  0146  296F               	goto	i1l1904
  3562  0147                     i1l1890:	
  3563                           ;main.c: 319: }
  3564                           ;main.c: 320: }
  3565                           
  3566                           ;main.c: 318: count = 0;
  3567                           
  3568                           
  3569                           ;main.c: 322: else
  3570                           ;main.c: 323: {
  3571                           ;main.c: 324: if(v_adj>950 && cnt_rpmcapture>2200 && cnt_rpmcapture< 4000 )
  3572  0147  3003               	movlw	3
  3573  0148  0235               	subwf	_v_adj+1,w
  3574  0149  30B7               	movlw	183
  3575  014A  1903               	skipnz
  3576  014B  0234               	subwf	_v_adj,w
  3577  014C  1C03               	skipc
  3578  014D  2976               	goto	i1l1908
  3579  014E  3008               	movlw	8
  3580  014F  0223               	subwf	_cnt_rpmcapture+1,w
  3581  0150  3099               	movlw	153
  3582  0151  1903               	skipnz
  3583  0152  0222               	subwf	_cnt_rpmcapture,w
  3584  0153  1C03               	skipc
  3585  0154  2976               	goto	i1l1908
  3586  0155  300F               	movlw	15
  3587  0156  0223               	subwf	_cnt_rpmcapture+1,w
  3588  0157  30A0               	movlw	160
  3589  0158  1903               	skipnz
  3590  0159  0222               	subwf	_cnt_rpmcapture,w
  3591  015A  1803               	skipnc
  3592  015B  2976               	goto	i1l1908
  3593                           
  3594                           ;main.c: 325: {
  3595                           ;main.c: 328: if(cnt_rpmcapture >2727)
  3596  015C  300A               	movlw	10
  3597  015D  0223               	subwf	_cnt_rpmcapture+1,w
  3598  015E  30A8               	movlw	168
  3599  015F  1903               	skipnz
  3600  0160  0222               	subwf	_cnt_rpmcapture,w
  3601  0161  1C03               	skipc
  3602  0162  2971               	goto	i1l1906
  3603                           
  3604                           ;main.c: 329: {
  3605                           ;main.c: 330: if (count < 1)
  3606  0163  0845               	movf	_count,w
  3607  0164  1D03               	btfss	3,2
  3608  0165  296B               	goto	i1l1902
  3609  0166                     i1l1900:	
  3610                           
  3611                           ;main.c: 331: count++;
  3612  0166  3001               	movlw	1
  3613  0167  00E0               	movwf	??_INT_T2
  3614  0168  0860               	movf	??_INT_T2,w
  3615  0169  07C5               	addwf	_count,f
  3616  016A  297A               	goto	i1l460
  3617  016B                     i1l1902:	
  3618                           
  3619                           ;main.c: 332: else {
  3620                           ;main.c: 333: v_adj_slow --;
  3621  016B  3001               	movlw	1
  3622  016C  02C9               	subwf	_v_adj_slow,f
  3623  016D  3000               	movlw	0
  3624  016E  3BCA               	subwfb	_v_adj_slow+1,f
  3625  016F                     i1l1904:	
  3626                           
  3627                           ;main.c: 335: count = 0;
  3628  016F  01C5               	clrf	_count
  3629                           
  3630                           ;main.c: 336: }
  3631                           ;main.c: 337: }
  3632  0170  297A               	goto	i1l460
  3633  0171                     i1l1906:	
  3634                           
  3635                           ;main.c: 339: else
  3636                           ;main.c: 340: {
  3637                           ;main.c: 341: v_adj_slow++;
  3638  0171  3001               	movlw	1
  3639  0172  07C9               	addwf	_v_adj_slow,f
  3640  0173  3000               	movlw	0
  3641  0174  3DCA               	addwfc	_v_adj_slow+1,f
  3642                           
  3643                           ;main.c: 342: }
  3644                           ;main.c: 345: }
  3645  0175  297A               	goto	i1l460
  3646  0176                     i1l1908:	
  3647                           
  3648                           ;main.c: 346: else
  3649                           ;main.c: 347: {
  3650                           ;main.c: 349: v_adj_slow=reloading_val;
  3651  0176  0848               	movf	_reloading_val+1,w
  3652  0177  00CA               	movwf	_v_adj_slow+1
  3653  0178  0847               	movf	_reloading_val,w
  3654  0179  00C9               	movwf	_v_adj_slow
  3655  017A                     i1l460:	
  3656                           
  3657                           ;main.c: 351: }
  3658                           ;main.c: 353: }
  3659                           ;main.c: 354: }
  3660                           ;main.c: 373: }
  3661                           ;main.c: 375: t2_last_tick++;
  3662  017A  3001               	movlw	1
  3663  017B  07AA               	addwf	_t2_last_tick,f
  3664  017C  3000               	movlw	0
  3665  017D  3DAB               	addwfc	_t2_last_tick+1,f
  3666                           
  3667                           ;main.c: 376: if(t2_last_tick>1001)
  3668  017E  3003               	movlw	3
  3669  017F  022B               	subwf	_t2_last_tick+1,w
  3670  0180  30EA               	movlw	234
  3671  0181  1903               	skipnz
  3672  0182  022A               	subwf	_t2_last_tick,w
  3673  0183  1C03               	skipc
  3674  0184  29D3               	goto	i1l1954
  3675                           
  3676                           ;main.c: 377: {
  3677                           ;main.c: 378: t2_last_tick=0;
  3678  0185  01AA               	clrf	_t2_last_tick
  3679  0186  01AB               	clrf	_t2_last_tick+1
  3680                           
  3681                           ;main.c: 380: if(v_adj>950)flag_L2=0;
  3682  0187  3003               	movlw	3
  3683  0188  0235               	subwf	_v_adj+1,w
  3684  0189  30B7               	movlw	183
  3685  018A  1903               	skipnz
  3686  018B  0234               	subwf	_v_adj,w
  3687  018C  1803               	btfsc	3,0
  3688  018D  2991               	goto	i1l1918
  3689                           
  3690                           ;main.c: 381: else
  3691                           ;main.c: 382: {
  3692                           ;main.c: 383: if(flag_L2)flag_L2=0;
  3693  018E  083D               	movf	_flag_L2,w
  3694  018F  1903               	btfsc	3,2
  3695  0190  2993               	goto	i1l481
  3696  0191                     i1l1918:	
  3697  0191  01BD               	clrf	_flag_L2
  3698  0192  2995               	goto	i1l1920
  3699  0193                     i1l481:	
  3700                           
  3701                           ;main.c: 384: else flag_L2=1;
  3702  0193  01BD               	clrf	_flag_L2
  3703  0194  0ABD               	incf	_flag_L2,f
  3704  0195                     i1l1920:	
  3705                           
  3706                           ;main.c: 385: }
  3707                           ;main.c: 386: if (v_test > 800)
  3708  0195  3003               	movlw	3
  3709  0196  024E               	subwf	_v_test+1,w
  3710  0197  3021               	movlw	33
  3711  0198  1903               	skipnz
  3712  0199  024D               	subwf	_v_test,w
  3713  019A  1C03               	skipc
  3714  019B  299E               	goto	i1l1926
  3715                           
  3716                           ;main.c: 387: {
  3717                           ;main.c: 388: carbonbrushoutcnt=0;
  3718  019C  01C1               	clrf	_carbonbrushoutcnt
  3719  019D  29B2               	goto	i1l487
  3720  019E                     i1l1926:	
  3721                           ;main.c: 397: }
  3722                           
  3723                           ;main.c: 394: flag_L1=1;
  3724                           
  3725                           
  3726                           ;main.c: 399: else if (v_test < 600)
  3727  019E  3002               	movlw	2
  3728  019F  024E               	subwf	_v_test+1,w
  3729  01A0  3058               	movlw	88
  3730  01A1  1903               	skipnz
  3731  01A2  024D               	subwf	_v_test,w
  3732  01A3  1803               	skipnc
  3733  01A4  29B6               	goto	i1l1938
  3734                           
  3735                           ;main.c: 400: {
  3736                           ;main.c: 403: carbonbrushoutcnt++;
  3737  01A5  3001               	movlw	1
  3738  01A6  00E0               	movwf	??_INT_T2
  3739  01A7  0860               	movf	??_INT_T2,w
  3740  01A8  07C1               	addwf	_carbonbrushoutcnt,f
  3741                           
  3742                           ;main.c: 404: if(carbonbrushoutcnt>2)
  3743  01A9  3003               	movlw	3
  3744  01AA  0241               	subwf	_carbonbrushoutcnt,w
  3745  01AB  1C03               	skipc
  3746  01AC  29B5               	goto	i1l1936
  3747                           
  3748                           ;main.c: 405: {
  3749                           ;main.c: 407: if(flag_L1)flag_L1=0;
  3750  01AD  0850               	movf	_flag_L1,w
  3751  01AE  1903               	btfsc	3,2
  3752  01AF  29B2               	goto	i1l487
  3753  01B0  01D0               	clrf	_flag_L1
  3754  01B1  29B6               	goto	i1l1938
  3755  01B2                     i1l487:	
  3756                           
  3757                           ;main.c: 408: else flag_L1=1;
  3758  01B2  01D0               	clrf	_flag_L1
  3759  01B3  0AD0               	incf	_flag_L1,f
  3760                           
  3761                           ;main.c: 409: }
  3762  01B4  29B6               	goto	i1l1938
  3763  01B5                     i1l1936:	
  3764                           
  3765                           ;main.c: 410: else
  3766                           ;main.c: 411: {
  3767                           ;main.c: 413: init_flag=0;
  3768  01B5  01D1               	clrf	_init_flag
  3769  01B6                     i1l1938:	
  3770                           
  3771                           ;main.c: 415: }
  3772                           ;main.c: 417: }
  3773                           ;main.c: 419: if(v_ntc < 200 )
  3774  01B6  3000               	movlw	0
  3775  01B7  0233               	subwf	_v_ntc+1,w
  3776  01B8  30C8               	movlw	200
  3777  01B9  1903               	skipnz
  3778  01BA  0232               	subwf	_v_ntc,w
  3779  01BB  1803               	skipnc
  3780  01BC  29CC               	goto	i1l1950
  3781                           
  3782                           ;main.c: 420: {
  3783                           ;main.c: 422: flag_L1=0;
  3784  01BD  01D0               	clrf	_flag_L1
  3785                           
  3786                           ;main.c: 423: overheatcnt++;
  3787  01BE  3001               	movlw	1
  3788  01BF  00E0               	movwf	??_INT_T2
  3789  01C0  0860               	movf	??_INT_T2,w
  3790  01C1  07C2               	addwf	_overheatcnt,f
  3791                           
  3792                           ;main.c: 424: if(overheatcnt>=3)init_flag=2;
  3793  01C2  3003               	movlw	3
  3794  01C3  0242               	subwf	_overheatcnt,w
  3795  01C4  1C03               	skipc
  3796  01C5  29CB               	goto	i1l1948
  3797  01C6  3002               	movlw	2
  3798  01C7  00E0               	movwf	??_INT_T2
  3799  01C8  0860               	movf	??_INT_T2,w
  3800  01C9  00D1               	movwf	_init_flag
  3801  01CA  29CC               	goto	i1l1950
  3802  01CB                     i1l1948:	
  3803                           
  3804                           ;main.c: 425: else
  3805                           ;main.c: 426: {
  3806                           ;main.c: 427: init_flag=0;
  3807  01CB  01D1               	clrf	_init_flag
  3808  01CC                     i1l1950:	
  3809                           
  3810                           ;main.c: 428: }
  3811                           ;main.c: 430: }
  3812                           ;main.c: 431: if(v_ntc > 200)
  3813  01CC  3000               	movlw	0
  3814  01CD  0233               	subwf	_v_ntc+1,w
  3815  01CE  30C9               	movlw	201
  3816  01CF  1903               	skipnz
  3817  01D0  0232               	subwf	_v_ntc,w
  3818  01D1  1803               	btfsc	3,0
  3819                           
  3820                           ;main.c: 432: {
  3821                           ;main.c: 433: init_flag=0;
  3822  01D2  01D1               	clrf	_init_flag
  3823  01D3                     i1l1954:	
  3824                           
  3825                           ;main.c: 435: }
  3826                           ;main.c: 436: }
  3827                           ;main.c: 439: static uint8_t last_switch_count=0;
  3828                           ;main.c: 442: if (init_flag==2)
  3829  01D3  3002               	movlw	2
  3830  01D4  0651               	xorwf	_init_flag,w
  3831  01D5  1D03               	btfss	3,2
  3832  01D6  0008               	return
  3833                           
  3834                           ;main.c: 443: {
  3835                           ;main.c: 444: t1_last_tick++;
  3836  01D7  3001               	movlw	1
  3837  01D8  07A8               	addwf	_t1_last_tick,f
  3838  01D9  3000               	movlw	0
  3839  01DA  3DA9               	addwfc	_t1_last_tick+1,f
  3840                           
  3841                           ;main.c: 445: if(t1_last_tick>1001)
  3842  01DB  3003               	movlw	3
  3843  01DC  0229               	subwf	_t1_last_tick+1,w
  3844  01DD  30EA               	movlw	234
  3845  01DE  1903               	skipnz
  3846  01DF  0228               	subwf	_t1_last_tick,w
  3847  01E0  1C03               	skipc
  3848  01E1  29F2               	goto	i1l1968
  3849                           
  3850                           ;main.c: 446: {
  3851                           ;main.c: 447: t1_last_tick=0;
  3852  01E2  01A8               	clrf	_t1_last_tick
  3853  01E3  01A9               	clrf	_t1_last_tick+1
  3854                           
  3855                           ;main.c: 448: if(v_adj>950)flag_L2=0;
  3856  01E4  3003               	movlw	3
  3857  01E5  0235               	subwf	_v_adj+1,w
  3858  01E6  30B7               	movlw	183
  3859  01E7  1903               	skipnz
  3860  01E8  0234               	subwf	_v_adj,w
  3861  01E9  1803               	btfsc	3,0
  3862  01EA  29EE               	goto	i1l1966
  3863                           
  3864                           ;main.c: 449: else
  3865                           ;main.c: 450: {
  3866                           ;main.c: 451: if(flag_L2)flag_L2=0;
  3867  01EB  083D               	movf	_flag_L2,w
  3868  01EC  1903               	btfsc	3,2
  3869  01ED  29F0               	goto	i1l500
  3870  01EE                     i1l1966:	
  3871  01EE  01BD               	clrf	_flag_L2
  3872  01EF  29F2               	goto	i1l1968
  3873  01F0                     i1l500:	
  3874                           
  3875                           ;main.c: 452: else flag_L2=1;
  3876  01F0  01BD               	clrf	_flag_L2
  3877  01F1  0ABD               	incf	_flag_L2,f
  3878  01F2                     i1l1968:	
  3879                           
  3880                           ;main.c: 453: }
  3881                           ;main.c: 454: }
  3882                           ;main.c: 456: if(last_switch_count !=switch_count)
  3883  01F2  0838               	movf	INT_T2@last_switch_count,w
  3884  01F3  0640               	xorwf	_switch_count,w
  3885  01F4  1903               	skipnz
  3886  01F5  2A07               	goto	i1l1976
  3887                           
  3888                           ;main.c: 457: {
  3889                           ;main.c: 458: if(t2_last_tick>1000)
  3890  01F6  3003               	movlw	3
  3891  01F7  022B               	subwf	_t2_last_tick+1,w
  3892  01F8  30E9               	movlw	233
  3893  01F9  1903               	skipnz
  3894  01FA  022A               	subwf	_t2_last_tick,w
  3895  01FB  1C03               	skipc
  3896  01FC  0008               	return
  3897                           
  3898                           ;main.c: 460: {
  3899                           ;main.c: 461: t2_last_tick=0;
  3900  01FD  01AA               	clrf	_t2_last_tick
  3901  01FE  01AB               	clrf	_t2_last_tick+1
  3902                           
  3903                           ;main.c: 462: start_switchpushflag=0;
  3904  01FF  01D2               	clrf	_start_switchpushflag
  3905                           
  3906                           ;main.c: 463: switch_count=0;
  3907  0200  01C0               	clrf	_switch_count
  3908                           
  3909                           ;main.c: 465: flag_L1=0;
  3910  0201  01D0               	clrf	_flag_L1
  3911                           
  3912                           ;main.c: 466: last_switch_count =switch_count;
  3913  0202  0840               	movf	_switch_count,w
  3914  0203  00E0               	movwf	??_INT_T2
  3915  0204  0860               	movf	??_INT_T2,w
  3916  0205  00B8               	movwf	INT_T2@last_switch_count
  3917                           
  3918                           ;main.c: 468: }
  3919                           ;main.c: 470: }
  3920  0206  0008               	return
  3921  0207                     i1l1976:	
  3922                           
  3923                           ;main.c: 471: else
  3924                           ;main.c: 472: {
  3925                           ;main.c: 474: cnt++;
  3926  0207  3001               	movlw	1
  3927  0208  07A0               	addwf	_cnt,f
  3928  0209  3000               	movlw	0
  3929  020A  3DA1               	addwfc	_cnt+1,f
  3930                           
  3931                           ;main.c: 475: if(cnt>500)
  3932  020B  3001               	movlw	1
  3933  020C  0221               	subwf	_cnt+1,w
  3934  020D  30F5               	movlw	245
  3935  020E  1903               	skipnz
  3936  020F  0220               	subwf	_cnt,w
  3937  0210  1C03               	skipc
  3938  0211  2A18               	goto	i1l1984
  3939                           
  3940                           ;main.c: 476: {
  3941                           ;main.c: 477: init_flag=0;
  3942  0212  01D1               	clrf	_init_flag
  3943                           
  3944                           ;main.c: 478: start_switchpushflag=1;
  3945  0213  01D2               	clrf	_start_switchpushflag
  3946  0214  0AD2               	incf	_start_switchpushflag,f
  3947                           
  3948                           ;main.c: 480: flag_L1=1;
  3949  0215  01D0               	clrf	_flag_L1
  3950  0216  0AD0               	incf	_flag_L1,f
  3951                           
  3952                           ;main.c: 482: }
  3953  0217  0008               	return
  3954  0218                     i1l1984:	
  3955                           
  3956                           ;main.c: 483: else
  3957                           ;main.c: 484: {
  3958                           ;main.c: 486: flag_L1=0;
  3959  0218  01D0               	clrf	_flag_L1
  3960  0219  0008               	return
  3961  021A                     __end_of_INT_T2:	
  3962                           
  3963                           	psect	text18
  3964  051D                     __ptext18:	
  3965 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  3966 ;; Defined at:
  3967 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		None
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1
  3981 ;;      Params:         0       0       0
  3982 ;;      Locals:         0       0       0
  3983 ;;      Temps:          0       0       0
  3984 ;;      Totals:         0       0       0
  3985 ;;Total ram usage:        0 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_TMR2_Initialize
  3991 ;;		_TMR2_CallBack
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _TMR2_DefaultInterruptHandler
  3997  051D                     _TMR2_DefaultInterruptHandler:	
  3998                           
  3999                           ;incstack = 0
  4000                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  4001  051D  0008               	return
  4002  051E                     __end_of_TMR2_DefaultInterruptHandler:	
  4003                           
  4004                           	psect	text19
  4005  0467                     __ptext19:	
  4006 ;; *************** function _tmr1gate_func_init *****************
  4007 ;; Defined at:
  4008 ;;		line 603 in file "main.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, pclath, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1
  4022 ;;      Params:         0       0       0
  4023 ;;      Locals:         0       0       0
  4024 ;;      Temps:          0       0       0
  4025 ;;      Totals:         0       0       0
  4026 ;;Total ram usage:        0 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    1
  4029 ;; This function calls:
  4030 ;;		_TMR1_WriteTimer
  4031 ;; This function is called by:
  4032 ;;		_INT_T2
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function _tmr1gate_func_init
  4038  0467                     _tmr1gate_func_init:	
  4039                           
  4040                           ;main.c: 606: T1GCON = 0xF2;
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _tmr1gate_func_init: [wreg+status,2+status,0+pclath+cstack]
  4044  0467  30F2               	movlw	242
  4045  0468  0020               	movlb	0	; select bank0
  4046  0469  0099               	movwf	25	;volatile
  4047                           
  4048                           ;main.c: 608: T1CON = 0x05;
  4049  046A  3005               	movlw	5
  4050  046B  0098               	movwf	24	;volatile
  4051                           
  4052                           ;main.c: 611: if(PIR1bits.TMR1IF )
  4053  046C  1C11               	btfss	17,0	;volatile
  4054  046D  0008               	return
  4055                           
  4056                           ;main.c: 612: {
  4057                           ;main.c: 613: PIR1bits.TMR1GIF=0;
  4058  046E  1391               	bcf	17,7	;volatile
  4059                           
  4060                           ;main.c: 614: PIR1bits.TMR1IF=0;
  4061  046F  1011               	bcf	17,0	;volatile
  4062                           
  4063                           ;main.c: 615: TMR1_WriteTimer(0x00);
  4064  0470  3000               	movlw	0
  4065  0471  00F0               	movwf	TMR1_WriteTimer@timerVal
  4066  0472  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  4067  0473  2458               	fcall	_TMR1_WriteTimer
  4068  0474  0008               	return
  4069  0475                     __end_of_tmr1gate_func_init:	
  4070                           
  4071                           	psect	text20
  4072  030C                     __ptext20:	
  4073 ;; *************** function _rpm_celiang *****************
  4074 ;; Defined at:
  4075 ;;		line 681 in file "main.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  a               2    0[BANK0 ] unsigned int 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  2   11[COMMON] unsigned int 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1
  4089 ;;      Params:         2       0       0
  4090 ;;      Locals:         0       2       0
  4091 ;;      Temps:          0       0       0
  4092 ;;      Totals:         2       2       0
  4093 ;;Total ram usage:        4 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    2
  4096 ;; This function calls:
  4097 ;;		_TMR1_ReadTimer
  4098 ;;		_TMR1_Reload
  4099 ;;		_TMR1_StartTimer
  4100 ;;		_TMR1_StopTimer
  4101 ;;		_TMR1_WriteTimer
  4102 ;; This function is called by:
  4103 ;;		_INT_T2
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           
  4108                           ;psect for function _rpm_celiang
  4109  030C                     _rpm_celiang:	
  4110                           
  4111                           ;main.c: 683: uint16_t a=0;
  4112                           
  4113                           ;incstack = 0
  4114                           ; Regs used in _rpm_celiang: [wreg+status,2+status,0+pclath+cstack]
  4115  030C  0020               	movlb	0	; select bank0
  4116  030D  01DE               	clrf	rpm_celiang@a
  4117  030E  01DF               	clrf	rpm_celiang@a+1
  4118                           
  4119                           ;main.c: 684: if(TMR1_ReadTimer()>50000)
  4120  030F  23D4               	fcall	_TMR1_ReadTimer
  4121  0310  30C3               	movlw	195
  4122  0311  0271               	subwf	?_TMR1_ReadTimer+1,w
  4123  0312  3051               	movlw	81
  4124  0313  1903               	skipnz
  4125  0314  0270               	subwf	?_TMR1_ReadTimer,w
  4126  0315  1C03               	skipc
  4127  0316  2B18               	goto	i1l1734
  4128                           
  4129                           ;main.c: 685: {
  4130                           ;main.c: 686: TMR1_Reload();
  4131  0317  24CE               	fcall	_TMR1_Reload
  4132  0318                     i1l1734:	
  4133                           
  4134                           ;main.c: 687: }
  4135                           ;main.c: 689: if(!T1GCONbits.T1GGO_nDONE )
  4136  0318  0020               	movlb	0	; select bank0
  4137  0319  1999               	btfsc	25,3	;volatile
  4138  031A  2B47               	goto	i1l1766
  4139                           
  4140                           ;main.c: 690: {
  4141                           ;main.c: 692: _delay((unsigned long)((1)*(16000000/4000000.0)));
  4142  031B  3200               	nop2	;2 cycle nop
  4143  031C  3200               	nop2	;2 cycle nop
  4144                           
  4145                           ;main.c: 693: TMR1_StopTimer();
  4146  031D  2517               	fcall	_TMR1_StopTimer
  4147                           
  4148                           ;main.c: 695: a=TMR1_ReadTimer();
  4149  031E  23D4               	fcall	_TMR1_ReadTimer
  4150  031F  0871               	movf	?_TMR1_ReadTimer+1,w
  4151  0320  0020               	movlb	0	; select bank0
  4152  0321  00DF               	movwf	rpm_celiang@a+1
  4153  0322  0870               	movf	?_TMR1_ReadTimer,w
  4154  0323  00DE               	movwf	rpm_celiang@a
  4155                           
  4156                           ;main.c: 697: TMR1_WriteTimer(0x00);
  4157  0324  3000               	movlw	0
  4158  0325  00F0               	movwf	TMR1_WriteTimer@timerVal
  4159  0326  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  4160  0327  2458               	fcall	_TMR1_WriteTimer
  4161                           
  4162                           ;main.c: 698: _delay((unsigned long)((1)*(16000000/4000000.0)));
  4163  0328  3200               	nop2	;2 cycle nop
  4164  0329  3200               	nop2	;2 cycle nop
  4165                           
  4166                           ;main.c: 699: if(a<2400 || a>4000 )
  4167  032A  3009               	movlw	9
  4168  032B  0020               	movlb	0	; select bank0
  4169  032C  025F               	subwf	rpm_celiang@a+1,w
  4170  032D  3060               	movlw	96
  4171  032E  1903               	skipnz
  4172  032F  025E               	subwf	rpm_celiang@a,w
  4173  0330  1C03               	skipc
  4174  0331  2B39               	goto	i1l1750
  4175  0332  300F               	movlw	15
  4176  0333  025F               	subwf	rpm_celiang@a+1,w
  4177  0334  30A1               	movlw	161
  4178  0335  1903               	skipnz
  4179  0336  025E               	subwf	rpm_celiang@a,w
  4180  0337  1C03               	skipc
  4181  0338  2B3B               	goto	i1l1752
  4182  0339                     i1l1750:	
  4183                           
  4184                           ;main.c: 700: {
  4185                           ;main.c: 701: a=0;
  4186  0339  01DE               	clrf	rpm_celiang@a
  4187  033A  01DF               	clrf	rpm_celiang@a+1
  4188  033B                     i1l1752:	
  4189                           
  4190                           ;main.c: 702: }
  4191                           ;main.c: 704: PIR1bits.TMR1GIF=0;
  4192  033B  1391               	bcf	17,7	;volatile
  4193                           
  4194                           ;main.c: 705: _delay((unsigned long)((1)*(16000000/4000000.0)));
  4195  033C  3200               	nop2	;2 cycle nop
  4196  033D  3200               	nop2	;2 cycle nop
  4197                           
  4198                           ;main.c: 706: T1GCONbits.T1GGO_nDONE=1;
  4199  033E  0020               	movlb	0	; select bank0
  4200  033F  1599               	bsf	25,3	;volatile
  4201                           
  4202                           ;main.c: 707: TMR1_StartTimer();
  4203  0340  251A               	fcall	_TMR1_StartTimer
  4204                           
  4205                           ;main.c: 710: return a ;
  4206  0341  0020               	movlb	0	; select bank0
  4207  0342  085F               	movf	rpm_celiang@a+1,w
  4208  0343  00FC               	movwf	?_rpm_celiang+1
  4209  0344  085E               	movf	rpm_celiang@a,w
  4210  0345  00FB               	movwf	?_rpm_celiang
  4211                           
  4212                           ;main.c: 712: }
  4213  0346  0008               	return
  4214  0347                     i1l1766:	
  4215                           
  4216                           ;main.c: 714: else
  4217                           ;main.c: 716: {
  4218                           ;main.c: 717: return 0 ;
  4219  0347  01FB               	clrf	?_rpm_celiang
  4220  0348  01FC               	clrf	?_rpm_celiang+1
  4221  0349  0008               	return
  4222  034A                     __end_of_rpm_celiang:	
  4223                           
  4224                           	psect	text21
  4225  0517                     __ptext21:	
  4226 ;; *************** function _TMR1_StopTimer *****************
  4227 ;; Defined at:
  4228 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		None
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1
  4242 ;;      Params:         0       0       0
  4243 ;;      Locals:         0       0       0
  4244 ;;      Temps:          0       0       0
  4245 ;;      Totals:         0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		_rpm_celiang
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _TMR1_StopTimer
  4257  0517                     _TMR1_StopTimer:	
  4258                           
  4259                           ;tmr1.c: 102: T1CONbits.TMR1ON = 0;
  4260                           
  4261                           ;incstack = 0
  4262                           ; Regs used in _TMR1_StopTimer: []
  4263  0517  0020               	movlb	0	; select bank0
  4264  0518  1018               	bcf	24,0	;volatile
  4265  0519  0008               	return
  4266  051A                     __end_of_TMR1_StopTimer:	
  4267                           
  4268                           	psect	text22
  4269  04CE                     __ptext22:	
  4270 ;; *************** function _TMR1_Reload *****************
  4271 ;; Defined at:
  4272 ;;		line 142 in file "mcc_generated_files/tmr1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1
  4286 ;;      Params:         0       0       0
  4287 ;;      Locals:         0       0       0
  4288 ;;      Temps:          0       0       0
  4289 ;;      Totals:         0       0       0
  4290 ;;Total ram usage:        0 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    1
  4293 ;; This function calls:
  4294 ;;		_TMR1_WriteTimer
  4295 ;; This function is called by:
  4296 ;;		_rpm_celiang
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _TMR1_Reload
  4302  04CE                     _TMR1_Reload:	
  4303                           
  4304                           ;tmr1.c: 144: TMR1_WriteTimer(timer1ReloadVal);
  4305                           
  4306                           ;incstack = 0
  4307                           ; Regs used in _TMR1_Reload: [wreg+status,2+status,0+pclath+cstack]
  4308  04CE  0020               	movlb	0	; select bank0
  4309  04CF  0858               	movf	_timer1ReloadVal+1,w	;volatile
  4310  04D0  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  4311  04D1  0857               	movf	_timer1ReloadVal,w	;volatile
  4312  04D2  00F0               	movwf	TMR1_WriteTimer@timerVal
  4313  04D3  2458               	fcall	_TMR1_WriteTimer
  4314  04D4  0008               	return
  4315  04D5                     __end_of_TMR1_Reload:	
  4316                           
  4317                           	psect	text23
  4318  03D4                     __ptext23:	
  4319 ;; *************** function _TMR1_ReadTimer *****************
  4320 ;; Defined at:
  4321 ;;		line 105 in file "mcc_generated_files/tmr1.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  readVal         2    7[COMMON] unsigned int 
  4326 ;;  readValLow      1   10[COMMON] unsigned char 
  4327 ;;  readValHigh     1    9[COMMON] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2    0[COMMON] unsigned int 
  4330 ;; Registers used:
  4331 ;;		wreg
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1
  4337 ;;      Params:         2       0       0
  4338 ;;      Locals:         4       0       0
  4339 ;;      Temps:          5       0       0
  4340 ;;      Totals:        11       0       0
  4341 ;;Total ram usage:       11 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_rpm_celiang
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function _TMR1_ReadTimer
  4352  03D4                     _TMR1_ReadTimer:	
  4353                           
  4354                           ;tmr1.c: 107: uint16_t readVal;
  4355                           ;tmr1.c: 108: uint8_t readValHigh;
  4356                           ;tmr1.c: 109: uint8_t readValLow;
  4357                           ;tmr1.c: 112: readValLow = TMR1L;
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _TMR1_ReadTimer: [wreg]
  4361  03D4  0020               	movlb	0	; select bank0
  4362  03D5  0816               	movf	22,w	;volatile
  4363  03D6  00F2               	movwf	??_TMR1_ReadTimer
  4364  03D7  0872               	movf	??_TMR1_ReadTimer,w
  4365  03D8  00FA               	movwf	TMR1_ReadTimer@readValLow
  4366                           
  4367                           ;tmr1.c: 113: readValHigh = TMR1H;
  4368  03D9  0817               	movf	23,w	;volatile
  4369  03DA  00F2               	movwf	??_TMR1_ReadTimer
  4370  03DB  0872               	movf	??_TMR1_ReadTimer,w
  4371  03DC  00F9               	movwf	TMR1_ReadTimer@readValHigh
  4372                           
  4373                           ;tmr1.c: 115: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  4374  03DD  087A               	movf	TMR1_ReadTimer@readValLow,w
  4375  03DE  00F2               	movwf	??_TMR1_ReadTimer
  4376  03DF  01F3               	clrf	??_TMR1_ReadTimer+1
  4377  03E0  0879               	movf	TMR1_ReadTimer@readValHigh,w
  4378  03E1  00F4               	movwf	??_TMR1_ReadTimer+2
  4379  03E2  01F5               	clrf	??_TMR1_ReadTimer+3
  4380  03E3  0874               	movf	??_TMR1_ReadTimer+2,w
  4381  03E4  00F5               	movwf	??_TMR1_ReadTimer+3
  4382  03E5  01F4               	clrf	??_TMR1_ReadTimer+2
  4383  03E6  0872               	movf	??_TMR1_ReadTimer,w
  4384  03E7  0474               	iorwf	??_TMR1_ReadTimer+2,w
  4385  03E8  00F7               	movwf	TMR1_ReadTimer@readVal
  4386  03E9  0873               	movf	??_TMR1_ReadTimer+1,w
  4387  03EA  0475               	iorwf	??_TMR1_ReadTimer+3,w
  4388  03EB  00F8               	movwf	TMR1_ReadTimer@readVal+1
  4389                           
  4390                           ;tmr1.c: 117: return readVal;
  4391  03EC  0878               	movf	TMR1_ReadTimer@readVal+1,w
  4392  03ED  00F1               	movwf	?_TMR1_ReadTimer+1
  4393  03EE  0877               	movf	TMR1_ReadTimer@readVal,w
  4394  03EF  00F0               	movwf	?_TMR1_ReadTimer
  4395  03F0  0008               	return
  4396  03F1                     __end_of_TMR1_ReadTimer:	
  4397                           
  4398                           	psect	text24
  4399  0275                     __ptext24:	
  4400 ;; *************** function _led_blink *****************
  4401 ;; Defined at:
  4402 ;;		line 723 in file "main.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1
  4416 ;;      Params:         0       0       0
  4417 ;;      Locals:         0       0       0
  4418 ;;      Temps:          0       0       0
  4419 ;;      Totals:         0       0       0
  4420 ;;Total ram usage:        0 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_INT_T2
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _led_blink
  4431  0275                     _led_blink:	
  4432                           
  4433                           ;main.c: 726: if(flag_L1==0 && flag_L2==0)
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _led_blink: [wreg+status,2+status,0]
  4437  0275  0020               	movlb	0	; select bank0
  4438  0276  0850               	movf	_flag_L1,w
  4439  0277  1D03               	btfss	3,2
  4440  0278  2A8C               	goto	i1l1696
  4441  0279  083D               	movf	_flag_L2,w
  4442  027A  1D03               	btfss	3,2
  4443  027B  2A8C               	goto	i1l1696
  4444                           
  4445                           ;main.c: 727: {
  4446                           ;main.c: 728: if(flag_blink)
  4447  027C  083C               	movf	_flag_blink,w
  4448  027D  1903               	btfsc	3,2
  4449  027E  2A85               	goto	i1l557
  4450                           
  4451                           ;main.c: 729: {
  4452                           ;main.c: 730: LATCbits.LATC4=1;
  4453  027F  0022               	movlb	2	; select bank2
  4454  0280  160E               	bsf	14,4	;volatile
  4455                           
  4456                           ;main.c: 731: LATCbits.LATC5=0;
  4457  0281  128E               	bcf	14,5	;volatile
  4458                           
  4459                           ;main.c: 732: flag_blink=0;
  4460  0282  0020               	movlb	0	; select bank0
  4461  0283  01BC               	clrf	_flag_blink
  4462                           
  4463                           ;main.c: 733: }
  4464  0284  2AB1               	goto	i1l1712
  4465  0285                     i1l557:	
  4466                           
  4467                           ;main.c: 734: else
  4468                           ;main.c: 735: {
  4469                           ;main.c: 736: LATCbits.LATC4=0;
  4470  0285  0022               	movlb	2	; select bank2
  4471  0286  120E               	bcf	14,4	;volatile
  4472                           
  4473                           ;main.c: 737: LATCbits.LATC5=1;
  4474  0287  168E               	bsf	14,5	;volatile
  4475                           
  4476                           ;main.c: 738: flag_blink=1;
  4477  0288  0020               	movlb	0	; select bank0
  4478  0289  01BC               	clrf	_flag_blink
  4479  028A  0ABC               	incf	_flag_blink,f
  4480                           
  4481                           ;main.c: 739: }
  4482                           ;main.c: 740: }
  4483  028B  2AB1               	goto	i1l1712
  4484  028C                     i1l1696:	
  4485                           
  4486                           ;main.c: 741: else
  4487                           ;main.c: 742: {
  4488                           ;main.c: 743: if(flag_L1==0)
  4489  028C  0850               	movf	_flag_L1,w
  4490  028D  1D03               	btfss	3,2
  4491  028E  2A9E               	goto	i1l1704
  4492                           
  4493                           ;main.c: 744: {
  4494                           ;main.c: 745: if(flag_blink)
  4495  028F  083C               	movf	_flag_blink,w
  4496  0290  1903               	btfsc	3,2
  4497  0291  2A97               	goto	i1l561
  4498                           
  4499                           ;main.c: 746: {
  4500                           ;main.c: 747: LATCbits.LATC4=1;
  4501  0292  0022               	movlb	2	; select bank2
  4502  0293  160E               	bsf	14,4	;volatile
  4503                           
  4504                           ;main.c: 748: flag_blink=0;
  4505  0294  0020               	movlb	0	; select bank0
  4506  0295  01BC               	clrf	_flag_blink
  4507                           
  4508                           ;main.c: 749: }
  4509  0296  2A9C               	goto	i1l562
  4510  0297                     i1l561:	
  4511                           
  4512                           ;main.c: 750: else
  4513                           ;main.c: 751: {
  4514                           ;main.c: 752: LATCbits.LATC4=0;
  4515  0297  0022               	movlb	2	; select bank2
  4516  0298  120E               	bcf	14,4	;volatile
  4517                           
  4518                           ;main.c: 753: flag_blink=1;
  4519  0299  0020               	movlb	0	; select bank0
  4520  029A  01BC               	clrf	_flag_blink
  4521  029B  0ABC               	incf	_flag_blink,f
  4522  029C                     i1l562:	
  4523                           
  4524                           ;main.c: 754: }
  4525                           ;main.c: 755: LATCbits.LATC5=1;
  4526  029C  0022               	movlb	2	; select bank2
  4527  029D  168E               	bsf	14,5	;volatile
  4528  029E                     i1l1704:	
  4529                           
  4530                           ;main.c: 756: }
  4531                           ;main.c: 757: if(flag_L2==0)
  4532  029E  0020               	movlb	0	; select bank0
  4533  029F  083D               	movf	_flag_L2,w
  4534  02A0  1D03               	btfss	3,2
  4535  02A1  2AB1               	goto	i1l1712
  4536                           
  4537                           ;main.c: 758: {
  4538                           ;main.c: 759: if(flag_blink)
  4539  02A2  083C               	movf	_flag_blink,w
  4540  02A3  1903               	btfsc	3,2
  4541  02A4  2AAA               	goto	i1l564
  4542                           
  4543                           ;main.c: 760: {
  4544                           ;main.c: 761: LATCbits.LATC5=1;
  4545  02A5  0022               	movlb	2	; select bank2
  4546  02A6  168E               	bsf	14,5	;volatile
  4547                           
  4548                           ;main.c: 762: flag_blink=0;
  4549  02A7  0020               	movlb	0	; select bank0
  4550  02A8  01BC               	clrf	_flag_blink
  4551                           
  4552                           ;main.c: 763: }
  4553  02A9  2AAF               	goto	i1l565
  4554  02AA                     i1l564:	
  4555                           
  4556                           ;main.c: 764: else
  4557                           ;main.c: 765: {
  4558                           ;main.c: 766: LATCbits.LATC5=0;
  4559  02AA  0022               	movlb	2	; select bank2
  4560  02AB  128E               	bcf	14,5	;volatile
  4561                           
  4562                           ;main.c: 767: flag_blink=1;
  4563  02AC  0020               	movlb	0	; select bank0
  4564  02AD  01BC               	clrf	_flag_blink
  4565  02AE  0ABC               	incf	_flag_blink,f
  4566  02AF                     i1l565:	
  4567                           
  4568                           ;main.c: 768: }
  4569                           ;main.c: 769: LATCbits.LATC4=1;
  4570  02AF  0022               	movlb	2	; select bank2
  4571  02B0  160E               	bsf	14,4	;volatile
  4572  02B1                     i1l1712:	
  4573                           
  4574                           ;main.c: 770: }
  4575                           ;main.c: 771: }
  4576                           ;main.c: 773: if(flag_L1)
  4577  02B1  0020               	movlb	0	; select bank0
  4578  02B2  0850               	movf	_flag_L1,w
  4579  02B3  1903               	btfsc	3,2
  4580  02B4  2ABB               	goto	i1l1716
  4581                           
  4582                           ;main.c: 774: {
  4583                           ;main.c: 775: LATCbits.LATC4=flag_L1;
  4584  02B5  0C50               	rrf	_flag_L1,w
  4585  02B6  0022               	movlb	2	; select bank2
  4586  02B7  1C03               	skipc
  4587  02B8  120E               	bcf	14,4	;volatile
  4588  02B9  1803               	skipnc
  4589  02BA  160E               	bsf	14,4	;volatile
  4590  02BB                     i1l1716:	
  4591                           
  4592                           ;main.c: 776: }
  4593                           ;main.c: 777: if(flag_L2)
  4594  02BB  0020               	movlb	0	; select bank0
  4595  02BC  083D               	movf	_flag_L2,w
  4596  02BD  1903               	btfsc	3,2
  4597  02BE  0008               	return
  4598                           
  4599                           ;main.c: 778: {
  4600                           ;main.c: 779: LATCbits.LATC5=flag_L2;
  4601  02BF  0C3D               	rrf	_flag_L2,w
  4602  02C0  0022               	movlb	2	; select bank2
  4603  02C1  1C03               	skipc
  4604  02C2  128E               	bcf	14,5	;volatile
  4605  02C3  1803               	skipnc
  4606  02C4  168E               	bsf	14,5	;volatile
  4607  02C5  0008               	return
  4608  02C6                     __end_of_led_blink:	
  4609                           
  4610                           	psect	text25
  4611  0381                     __ptext25:	
  4612 ;; *************** function ___lwdiv *****************
  4613 ;; Defined at:
  4614 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  divisor         2    0[COMMON] unsigned int 
  4617 ;;  dividend        2    2[COMMON] unsigned int 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  quotient        2    5[COMMON] unsigned int 
  4620 ;;  counter         1    7[COMMON] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  2    0[COMMON] unsigned int 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1
  4630 ;;      Params:         4       0       0
  4631 ;;      Locals:         3       0       0
  4632 ;;      Temps:          1       0       0
  4633 ;;      Totals:         8       0       0
  4634 ;;Total ram usage:        8 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_INT_T2
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function ___lwdiv
  4645  0381                     ___lwdiv:	
  4646                           
  4647                           ;incstack = 0
  4648                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4649  0381  01F5               	clrf	___lwdiv@quotient
  4650  0382  01F6               	clrf	___lwdiv@quotient+1
  4651  0383  0870               	movf	___lwdiv@divisor,w
  4652  0384  0471               	iorwf	___lwdiv@divisor+1,w
  4653  0385  1903               	btfsc	3,2
  4654  0386  2BB0               	goto	i1l1792
  4655  0387  01F7               	clrf	___lwdiv@counter
  4656  0388  0AF7               	incf	___lwdiv@counter,f
  4657  0389                     i1l1780:	
  4658  0389  1BF1               	btfsc	___lwdiv@divisor+1,7
  4659  038A  2B95               	goto	i1l1782
  4660  038B  3001               	movlw	1
  4661  038C                     u128_25:	
  4662  038C  35F0               	lslf	___lwdiv@divisor,f
  4663  038D  0DF1               	rlf	___lwdiv@divisor+1,f
  4664  038E  0B89               	decfsz	9,f
  4665  038F  2B8C               	goto	u128_25
  4666  0390  3001               	movlw	1
  4667  0391  00F4               	movwf	??___lwdiv
  4668  0392  0874               	movf	??___lwdiv,w
  4669  0393  07F7               	addwf	___lwdiv@counter,f
  4670  0394  2B89               	goto	i1l1780
  4671  0395                     i1l1782:	
  4672  0395  3001               	movlw	1
  4673  0396                     u130_25:	
  4674  0396  35F5               	lslf	___lwdiv@quotient,f
  4675  0397  0DF6               	rlf	___lwdiv@quotient+1,f
  4676  0398  0B89               	decfsz	9,f
  4677  0399  2B96               	goto	u130_25
  4678  039A  0871               	movf	___lwdiv@divisor+1,w
  4679  039B  0273               	subwf	___lwdiv@dividend+1,w
  4680  039C  1D03               	skipz
  4681  039D  2BA0               	goto	u131_25
  4682  039E  0870               	movf	___lwdiv@divisor,w
  4683  039F  0272               	subwf	___lwdiv@dividend,w
  4684  03A0                     u131_25:	
  4685  03A0  1C03               	skipc
  4686  03A1  2BA7               	goto	i1l1788
  4687  03A2  0870               	movf	___lwdiv@divisor,w
  4688  03A3  02F2               	subwf	___lwdiv@dividend,f
  4689  03A4  0871               	movf	___lwdiv@divisor+1,w
  4690  03A5  3BF3               	subwfb	___lwdiv@dividend+1,f
  4691  03A6  1475               	bsf	___lwdiv@quotient,0
  4692  03A7                     i1l1788:	
  4693  03A7  3001               	movlw	1
  4694  03A8                     u132_25:	
  4695  03A8  36F1               	lsrf	___lwdiv@divisor+1,f
  4696  03A9  0CF0               	rrf	___lwdiv@divisor,f
  4697  03AA  0B89               	decfsz	9,f
  4698  03AB  2BA8               	goto	u132_25
  4699  03AC  3001               	movlw	1
  4700  03AD  02F7               	subwf	___lwdiv@counter,f
  4701  03AE  1D03               	btfss	3,2
  4702  03AF  2B95               	goto	i1l1782
  4703  03B0                     i1l1792:	
  4704  03B0  0876               	movf	___lwdiv@quotient+1,w
  4705  03B1  00F1               	movwf	?___lwdiv+1
  4706  03B2  0875               	movf	___lwdiv@quotient,w
  4707  03B3  00F0               	movwf	?___lwdiv
  4708  03B4  0008               	return
  4709  03B5                     __end_of___lwdiv:	
  4710                           
  4711                           	psect	text26
  4712  03F1                     __ptext26:	
  4713 ;; *************** function _ADC_GetConversion *****************
  4714 ;; Defined at:
  4715 ;;		line 113 in file "mcc_generated_files/adc.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  channel         1    wreg     enum E2935
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  channel         1    3[COMMON] enum E2935
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  2    0[COMMON] unsigned int 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMMON   BANK0   BANK1
  4729 ;;      Params:         2       0       0
  4730 ;;      Locals:         1       0       0
  4731 ;;      Temps:          1       0       0
  4732 ;;      Totals:         4       0       0
  4733 ;;Total ram usage:        4 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_INT_T2
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _ADC_GetConversion
  4744  03F1                     _ADC_GetConversion:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4748                           ;ADC_GetConversion@channel stored from wreg
  4749  03F1  00F3               	movwf	ADC_GetConversion@channel
  4750                           
  4751                           ;adc.c: 116: ADCON0bits.CHS = channel;
  4752  03F2  0873               	movf	ADC_GetConversion@channel,w
  4753  03F3  00F2               	movwf	??_ADC_GetConversion
  4754  03F4  0DF2               	rlf	??_ADC_GetConversion,f
  4755  03F5  0DF2               	rlf	??_ADC_GetConversion,f
  4756  03F6  0021               	movlb	1	; select bank1
  4757  03F7  081D               	movf	29,w	;volatile
  4758  03F8  0672               	xorwf	??_ADC_GetConversion,w
  4759  03F9  3983               	andlw	-125
  4760  03FA  0672               	xorwf	??_ADC_GetConversion,w
  4761  03FB  009D               	movwf	29	;volatile
  4762                           
  4763                           ;adc.c: 119: ADCON0bits.ADON = 1;
  4764  03FC  141D               	bsf	29,0	;volatile
  4765                           
  4766                           ;adc.c: 122: _delay((unsigned long)((5)*(16000000/4000000.0)));
  4767  03FD  3006               	movlw	6
  4768  03FE                     u226_27:	
  4769  03FE  0B89               	decfsz	9,f
  4770  03FF  2BFE               	goto	u226_27
  4771  0400  3200               	nop2
  4772                           
  4773                           ;adc.c: 125: ADCON0bits.GO_nDONE = 1;
  4774  0401  0021               	movlb	1	; select bank1
  4775  0402  149D               	bsf	29,1	;volatile
  4776  0403                     i1l116:	
  4777                           ;adc.c: 129: {
  4778                           
  4779                           ;adc.c: 128: while (ADCON0bits.GO_nDONE)
  4780                           
  4781  0403  189D               	btfsc	29,1	;volatile
  4782  0404  2C03               	goto	i1l116
  4783                           
  4784                           ;adc.c: 130: }
  4785                           ;adc.c: 133: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4786  0405  081C               	movf	28,w	;volatile
  4787  0406  00F1               	movwf	?_ADC_GetConversion+1
  4788  0407  081B               	movf	27,w	;volatile
  4789  0408  00F0               	movwf	?_ADC_GetConversion
  4790  0409  0008               	return
  4791  040A                     __end_of_ADC_GetConversion:	
  4792                           
  4793                           	psect	text27
  4794  04C5                     __ptext27:	
  4795 ;; *************** function _TMR1_ISR *****************
  4796 ;; Defined at:
  4797 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0, pclath, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1
  4811 ;;      Params:         0       0       0
  4812 ;;      Locals:         0       0       0
  4813 ;;      Temps:          0       0       0
  4814 ;;      Totals:         0       0       0
  4815 ;;Total ram usage:        0 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    2
  4818 ;; This function calls:
  4819 ;;		_TMR1_CallBack
  4820 ;;		_TMR1_WriteTimer
  4821 ;; This function is called by:
  4822 ;;		_INTERRUPT_InterruptManager
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           
  4827                           ;psect for function _TMR1_ISR
  4828  04C5                     _TMR1_ISR:	
  4829                           
  4830                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  4831                           
  4832                           ;incstack = 0
  4833                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  4834  04C5  0020               	movlb	0	; select bank0
  4835  04C6  1011               	bcf	17,0	;volatile
  4836                           
  4837                           ;tmr1.c: 162: TMR1_WriteTimer(timer1ReloadVal);
  4838  04C7  0858               	movf	_timer1ReloadVal+1,w	;volatile
  4839  04C8  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  4840  04C9  0857               	movf	_timer1ReloadVal,w	;volatile
  4841  04CA  00F0               	movwf	TMR1_WriteTimer@timerVal
  4842  04CB  2458               	fcall	_TMR1_WriteTimer
  4843                           
  4844                           ;tmr1.c: 166: TMR1_CallBack();
  4845  04CC  24A6               	fcall	_TMR1_CallBack
  4846  04CD  0008               	return
  4847  04CE                     __end_of_TMR1_ISR:	
  4848                           
  4849                           	psect	text28
  4850  04A6                     __ptext28:	
  4851 ;; *************** function _TMR1_CallBack *****************
  4852 ;; Defined at:
  4853 ;;		line 169 in file "mcc_generated_files/tmr1.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0, pclath, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1
  4867 ;;      Params:         0       0       0
  4868 ;;      Locals:         0       0       0
  4869 ;;      Temps:          0       0       0
  4870 ;;      Totals:         0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    1
  4874 ;; This function calls:
  4875 ;;		Absolute function
  4876 ;;		_TMR1_DefaultInterruptHandler
  4877 ;;		_tmr1cnt_func_init
  4878 ;; This function is called by:
  4879 ;;		_TMR1_ISR
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _TMR1_CallBack
  4885  04A6                     _TMR1_CallBack:	
  4886                           
  4887                           ;tmr1.c: 172: if(TMR1_InterruptHandler)
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4891  04A6  0020               	movlb	0	; select bank0
  4892  04A7  0855               	movf	_TMR1_InterruptHandler,w
  4893  04A8  0456               	iorwf	_TMR1_InterruptHandler+1,w
  4894  04A9  1903               	btfsc	3,2
  4895  04AA  0008               	return
  4896                           
  4897                           ;tmr1.c: 173: {
  4898                           ;tmr1.c: 174: TMR1_InterruptHandler();
  4899  04AB  0856               	movf	_TMR1_InterruptHandler+1,w
  4900  04AC  008A               	movwf	10
  4901  04AD  0855               	movf	_TMR1_InterruptHandler,w
  4902  04AE  000A               	callw
  4903  04AF  3184               	pagesel	$
  4904  04B0  0008               	return
  4905  04B1                     __end_of_TMR1_CallBack:	
  4906                           
  4907                           	psect	text29
  4908  051E                     __ptext29:	
  4909 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  4910 ;; Defined at:
  4911 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		None
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1
  4925 ;;      Params:         0       0       0
  4926 ;;      Locals:         0       0       0
  4927 ;;      Temps:          0       0       0
  4928 ;;      Totals:         0       0       0
  4929 ;;Total ram usage:        0 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_TMR1_Initialize
  4935 ;;		_TMR1_CallBack
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _TMR1_DefaultInterruptHandler
  4941  051E                     _TMR1_DefaultInterruptHandler:	
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  4945  051E  0008               	return
  4946  051F                     __end_of_TMR1_DefaultInterruptHandler:	
  4947                           
  4948                           	psect	text30
  4949  04FF                     __ptext30:	
  4950 ;; *************** function _tmr1cnt_func_init *****************
  4951 ;; Defined at:
  4952 ;;		line 619 in file "main.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		None
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1
  4966 ;;      Params:         0       0       0
  4967 ;;      Locals:         0       0       0
  4968 ;;      Temps:          0       0       0
  4969 ;;      Totals:         0       0       0
  4970 ;;Total ram usage:        0 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_main
  4976 ;;		_TMR1_CallBack
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           
  4981                           ;psect for function _tmr1cnt_func_init
  4982  04FF                     _tmr1cnt_func_init:	
  4983                           
  4984                           ;main.c: 622: PIR1bits.TMR1IF=0;
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _tmr1cnt_func_init: []
  4988  04FF  0020               	movlb	0	; select bank0
  4989  0500  1011               	bcf	17,0	;volatile
  4990                           
  4991                           ;main.c: 623: PIE1bits.TMR1IE=0;
  4992  0501  0021               	movlb	1	; select bank1
  4993  0502  1011               	bcf	17,0	;volatile
  4994                           
  4995                           ;main.c: 624: INTCONbits.TMR0IE=1;
  4996  0503  168B               	bsf	11,5	;volatile
  4997  0504  0008               	return
  4998  0505                     __end_of_tmr1cnt_func_init:	
  4999                           
  5000                           	psect	text31
  5001  0447                     __ptext31:	
  5002 ;; *************** function _TMR0_ISR *****************
  5003 ;; Defined at:
  5004 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, pclath, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1
  5018 ;;      Params:         0       0       0
  5019 ;;      Locals:         0       0       0
  5020 ;;      Temps:          0       0       0
  5021 ;;      Totals:         0       0       0
  5022 ;;Total ram usage:        0 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    3
  5025 ;; This function calls:
  5026 ;;		_TMR0_CallBack
  5027 ;; This function is called by:
  5028 ;;		_INTERRUPT_InterruptManager
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _TMR0_ISR
  5034  0447                     _TMR0_ISR:	
  5035                           
  5036                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  5037                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  5038                           
  5039                           ;incstack = 0
  5040                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5041  0447  110B               	bcf	11,2	;volatile
  5042                           
  5043                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  5044  0448  0020               	movlb	0	; select bank0
  5045  0449  085D               	movf	_timer0ReloadVal,w	;volatile
  5046  044A  0095               	movwf	21	;volatile
  5047                           
  5048                           ;tmr0.c: 118: if (++CountCallBack >= 1)
  5049  044B  3001               	movlw	1
  5050  044C  07B6               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  5051  044D  3000               	movlw	0
  5052  044E  3DB7               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  5053  044F  0836               	movf	TMR0_ISR@CountCallBack,w	;volatile
  5054  0450  0437               	iorwf	TMR0_ISR@CountCallBack+1,w	;volatile
  5055  0451  1903               	btfsc	3,2
  5056  0452  0008               	return
  5057                           
  5058                           ;tmr0.c: 119: {
  5059                           ;tmr0.c: 121: TMR0_CallBack();
  5060  0453  24B1               	fcall	_TMR0_CallBack
  5061                           
  5062                           ;tmr0.c: 124: CountCallBack = 0;
  5063  0454  0020               	movlb	0	; select bank0
  5064  0455  01B6               	clrf	TMR0_ISR@CountCallBack	;volatile
  5065  0456  01B7               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  5066  0457  0008               	return
  5067  0458                     __end_of_TMR0_ISR:	
  5068                           
  5069                           	psect	text32
  5070  04B1                     __ptext32:	
  5071 ;; *************** function _TMR0_CallBack *****************
  5072 ;; Defined at:
  5073 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0, pclath, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1
  5087 ;;      Params:         0       0       0
  5088 ;;      Locals:         0       0       0
  5089 ;;      Temps:          0       0       0
  5090 ;;      Totals:         0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    2
  5094 ;; This function calls:
  5095 ;;		Absolute function
  5096 ;;		_TMR0_DefaultInterruptHandler
  5097 ;;		_tmr0reloadcnt
  5098 ;; This function is called by:
  5099 ;;		_TMR0_ISR
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           
  5104                           ;psect for function _TMR0_CallBack
  5105  04B1                     _TMR0_CallBack:	
  5106                           
  5107                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  5108                           
  5109                           ;incstack = 0
  5110                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5111  04B1  0020               	movlb	0	; select bank0
  5112  04B2  0859               	movf	_TMR0_InterruptHandler,w
  5113  04B3  045A               	iorwf	_TMR0_InterruptHandler+1,w
  5114  04B4  1903               	btfsc	3,2
  5115  04B5  0008               	return
  5116                           
  5117                           ;tmr0.c: 135: {
  5118                           ;tmr0.c: 136: TMR0_InterruptHandler();
  5119  04B6  085A               	movf	_TMR0_InterruptHandler+1,w
  5120  04B7  008A               	movwf	10
  5121  04B8  0859               	movf	_TMR0_InterruptHandler,w
  5122  04B9  000A               	callw
  5123  04BA  3184               	pagesel	$
  5124  04BB  0008               	return
  5125  04BC                     __end_of_TMR0_CallBack:	
  5126                           
  5127                           	psect	text33
  5128  051F                     __ptext33:	
  5129 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5130 ;; Defined at:
  5131 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;		None
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		None
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1
  5145 ;;      Params:         0       0       0
  5146 ;;      Locals:         0       0       0
  5147 ;;      Temps:          0       0       0
  5148 ;;      Totals:         0       0       0
  5149 ;;Total ram usage:        0 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_TMR0_Initialize
  5155 ;;		_TMR0_CallBack
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _TMR0_DefaultInterruptHandler
  5161  051F                     _TMR0_DefaultInterruptHandler:	
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5165  051F  0008               	return
  5166  0520                     __end_of_TMR0_DefaultInterruptHandler:	
  5167                           
  5168                           	psect	text34
  5169  034A                     __ptext34:	
  5170 ;; *************** function _tmr0reloadcnt *****************
  5171 ;; Defined at:
  5172 ;;		line 631 in file "main.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1
  5186 ;;      Params:         0       0       0
  5187 ;;      Locals:         0       0       0
  5188 ;;      Temps:          1       0       0
  5189 ;;      Totals:         1       0       0
  5190 ;;Total ram usage:        1 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    1
  5193 ;; This function calls:
  5194 ;;		_TMR1_WriteTimer
  5195 ;; This function is called by:
  5196 ;;		_main
  5197 ;;		_TMR0_CallBack
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _tmr0reloadcnt
  5203  034A                     _tmr0reloadcnt:	
  5204                           
  5205                           ;main.c: 635: if(Tmr0fuctionswitch==dlycnt_processing && tmr0cnt==0 )
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _tmr0reloadcnt: [wreg+status,2+status,0+pclath+cstack]
  5209  034A  3003               	movlw	3
  5210  034B  0020               	movlb	0	; select bank0
  5211  034C  064F               	xorwf	_Tmr0fuctionswitch,w
  5212  034D  1D03               	btfss	3,2
  5213  034E  2B59               	goto	i1l2046
  5214  034F  082C               	movf	_tmr0cnt,w
  5215  0350  042D               	iorwf	_tmr0cnt+1,w
  5216  0351  1D03               	btfss	3,2
  5217  0352  2B59               	goto	i1l2046
  5218                           
  5219                           ;main.c: 636: {
  5220                           ;main.c: 638: tmr0cnt=12;
  5221  0353  300C               	movlw	12
  5222  0354  00AC               	movwf	_tmr0cnt
  5223  0355  3000               	movlw	0
  5224  0356  00AD               	movwf	_tmr0cnt+1
  5225                           
  5226                           ;main.c: 639: Tmr0fuctionswitch=trg;
  5227  0357  01CF               	clrf	_Tmr0fuctionswitch
  5228  0358  0ACF               	incf	_Tmr0fuctionswitch,f
  5229  0359                     i1l2046:	
  5230                           
  5231                           ;main.c: 645: }
  5232                           ;main.c: 646: if(Tmr0fuctionswitch==trg)
  5233  0359  034F               	decf	_Tmr0fuctionswitch,w
  5234  035A  1D03               	btfss	3,2
  5235  035B  0008               	return
  5236                           
  5237                           ;main.c: 647: {
  5238                           ;main.c: 648: if(tmr0cnt%2)
  5239  035C  1C2C               	btfss	_tmr0cnt,0
  5240  035D  2B61               	goto	i1l540
  5241                           
  5242                           ;main.c: 649: {
  5243                           ;main.c: 650: LATAbits.LATA5=1;
  5244  035E  0022               	movlb	2	; select bank2
  5245  035F  168C               	bsf	12,5	;volatile
  5246                           
  5247                           ;main.c: 651: }
  5248  0360  2B63               	goto	i1l2052
  5249  0361                     i1l540:	
  5250                           
  5251                           ;main.c: 652: else
  5252                           ;main.c: 653: {
  5253                           ;main.c: 654: LATAbits.LATA5=0;
  5254  0361  0022               	movlb	2	; select bank2
  5255  0362  128C               	bcf	12,5	;volatile
  5256  0363                     i1l2052:	
  5257                           
  5258                           ;main.c: 655: }
  5259                           ;main.c: 658: TMR0 = 0xce;
  5260  0363  30CE               	movlw	206
  5261  0364  0020               	movlb	0	; select bank0
  5262  0365  0095               	movwf	21	;volatile
  5263                           
  5264                           ;main.c: 660: if(tmr0cnt>0)
  5265  0366  082C               	movf	_tmr0cnt,w
  5266  0367  042D               	iorwf	_tmr0cnt+1,w
  5267  0368  1903               	btfsc	3,2
  5268  0369  2B6F               	goto	i1l2058
  5269                           
  5270                           ;main.c: 661: {
  5271                           ;main.c: 662: tmr0cnt--;
  5272  036A  3001               	movlw	1
  5273  036B  02AC               	subwf	_tmr0cnt,f
  5274  036C  3000               	movlw	0
  5275  036D  3BAD               	subwfb	_tmr0cnt+1,f
  5276                           
  5277                           ;main.c: 664: }
  5278  036E  0008               	return
  5279  036F                     i1l2058:	
  5280                           
  5281                           ;main.c: 665: else
  5282                           ;main.c: 666: {
  5283                           ;main.c: 667: Tmr0fuctionswitch=dlycnt_processing;
  5284  036F  3003               	movlw	3
  5285  0370  00F2               	movwf	??_tmr0reloadcnt
  5286  0371  0872               	movf	??_tmr0reloadcnt,w
  5287  0372  00CF               	movwf	_Tmr0fuctionswitch
  5288                           
  5289                           ;main.c: 668: tmr0cnt=0;
  5290  0373  01AC               	clrf	_tmr0cnt
  5291  0374  01AD               	clrf	_tmr0cnt+1
  5292                           
  5293                           ;main.c: 669: TMR0= 0xff;
  5294  0375  30FF               	movlw	255
  5295  0376  0095               	movwf	21	;volatile
  5296                           
  5297                           ;main.c: 670: LATAbits.LATA5=0;
  5298  0377  0022               	movlb	2	; select bank2
  5299  0378  128C               	bcf	12,5	;volatile
  5300                           
  5301                           ;main.c: 672: INTCONbits.TMR0IE=0;
  5302  0379  128B               	bcf	11,5	;volatile
  5303                           
  5304                           ;main.c: 674: trigger=0;
  5305  037A  0020               	movlb	0	; select bank0
  5306  037B  01C6               	clrf	_trigger
  5307                           
  5308                           ;main.c: 675: TMR1_WriteTimer(0x00);
  5309  037C  3000               	movlw	0
  5310  037D  00F0               	movwf	TMR1_WriteTimer@timerVal
  5311  037E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  5312  037F  2458               	fcall	_TMR1_WriteTimer
  5313  0380  0008               	return
  5314  0381                     __end_of_tmr0reloadcnt:	
  5315                           
  5316                           	psect	text35
  5317  050A                     __ptext35:	
  5318 ;; *************** function _PIN_MANAGER_IOC *****************
  5319 ;; Defined at:
  5320 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, pclath, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1
  5334 ;;      Params:         0       0       0
  5335 ;;      Locals:         0       0       0
  5336 ;;      Temps:          0       0       0
  5337 ;;      Totals:         0       0       0
  5338 ;;Total ram usage:        0 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    3
  5341 ;; This function calls:
  5342 ;;		_IOCAF2_ISR
  5343 ;; This function is called by:
  5344 ;;		_INTERRUPT_InterruptManager
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _PIN_MANAGER_IOC
  5350  050A                     _PIN_MANAGER_IOC:	
  5351                           
  5352                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  5356  050A  0027               	movlb	7	; select bank7
  5357  050B  1D13               	btfss	19,2	;volatile
  5358  050C  0008               	return
  5359                           
  5360                           ;pin_manager.c: 114: {
  5361                           ;pin_manager.c: 115: IOCAF2_ISR();
  5362  050D  2482               	fcall	_IOCAF2_ISR
  5363  050E  0008               	return
  5364  050F                     __end_of_PIN_MANAGER_IOC:	
  5365                           
  5366                           	psect	text36
  5367  0482                     __ptext36:	
  5368 ;; *************** function _IOCAF2_ISR *****************
  5369 ;; Defined at:
  5370 ;;		line 122 in file "mcc_generated_files/pin_manager.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      void 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0, pclath, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1
  5384 ;;      Params:         0       0       0
  5385 ;;      Locals:         0       0       0
  5386 ;;      Temps:          0       0       0
  5387 ;;      Totals:         0       0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    2
  5391 ;; This function calls:
  5392 ;;		Absolute function
  5393 ;;		_INT_RA2
  5394 ;;		_IOCAF2_DefaultInterruptHandler
  5395 ;; This function is called by:
  5396 ;;		_PIN_MANAGER_IOC
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           
  5401                           ;psect for function _IOCAF2_ISR
  5402  0482                     _IOCAF2_ISR:	
  5403                           
  5404                           ;pin_manager.c: 127: if(IOCAF2_InterruptHandler)
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  5408  0482  0020               	movlb	0	; select bank0
  5409  0483  085B               	movf	_IOCAF2_InterruptHandler,w
  5410  0484  045C               	iorwf	_IOCAF2_InterruptHandler+1,w
  5411  0485  1903               	btfsc	3,2
  5412  0486  2C8C               	goto	i1l2148
  5413                           
  5414                           ;pin_manager.c: 128: {
  5415                           ;pin_manager.c: 129: IOCAF2_InterruptHandler();
  5416  0487  085C               	movf	_IOCAF2_InterruptHandler+1,w
  5417  0488  008A               	movwf	10
  5418  0489  085B               	movf	_IOCAF2_InterruptHandler,w
  5419  048A  000A               	callw
  5420  048B  3184               	pagesel	$
  5421  048C                     i1l2148:	
  5422                           
  5423                           ;pin_manager.c: 130: }
  5424                           ;pin_manager.c: 131: IOCAFbits.IOCAF2 = 0;
  5425  048C  0027               	movlb	7	; select bank7
  5426  048D  1113               	bcf	19,2	;volatile
  5427  048E  0008               	return
  5428  048F                     __end_of_IOCAF2_ISR:	
  5429                           
  5430                           	psect	text37
  5431  021A                     __ptext37:	
  5432 ;; *************** function _INT_RA2 *****************
  5433 ;; Defined at:
  5434 ;;		line 494 in file "main.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2, status,0, pclath, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1
  5448 ;;      Params:         0       0       0
  5449 ;;      Locals:         0       0       0
  5450 ;;      Temps:          2       0       0
  5451 ;;      Totals:         2       0       0
  5452 ;;Total ram usage:        2 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    1
  5455 ;; This function calls:
  5456 ;;		_TMR1_StartTimer
  5457 ;;		_TMR1_WriteTimer
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;;		_IOCAF2_ISR
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           
  5465                           ;psect for function _INT_RA2
  5466  021A                     _INT_RA2:	
  5467                           
  5468                           ;main.c: 498: count_sta=0;
  5469                           
  5470                           ;incstack = 0
  5471                           ; Regs used in _INT_RA2: [wreg+status,2+status,0+pclath+cstack]
  5472  021A  0020               	movlb	0	; select bank0
  5473  021B  01C4               	clrf	_count_sta
  5474                           
  5475                           ;main.c: 499: cnt=0;
  5476  021C  01A0               	clrf	_cnt
  5477  021D  01A1               	clrf	_cnt+1
  5478                           
  5479                           ;main.c: 501: if(PIR1bits.TMR1IF && trigger == 0 )
  5480  021E  1C11               	btfss	17,0	;volatile
  5481  021F  2A29               	goto	i1l1996
  5482  0220  0846               	movf	_trigger,w
  5483  0221  1D03               	btfss	3,2
  5484  0222  2A29               	goto	i1l1996
  5485                           
  5486                           ;main.c: 502: {
  5487                           ;main.c: 503: PIR1bits.TMR1GIF=0;
  5488  0223  1391               	bcf	17,7	;volatile
  5489                           
  5490                           ;main.c: 504: PIR1bits.TMR1IF=0;
  5491  0224  1011               	bcf	17,0	;volatile
  5492                           
  5493                           ;main.c: 505: TMR1_WriteTimer(0x00);
  5494  0225  3000               	movlw	0
  5495  0226  00F0               	movwf	TMR1_WriteTimer@timerVal
  5496  0227  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  5497  0228  2458               	fcall	_TMR1_WriteTimer
  5498  0229                     i1l1996:	
  5499                           
  5500                           ;main.c: 507: }
  5501                           ;main.c: 509: if(init_flag==1)
  5502  0229  0020               	movlb	0	; select bank0
  5503  022A  0351               	decf	_init_flag,w
  5504  022B  1D03               	btfss	3,2
  5505  022C  2A42               	goto	i1l2010
  5506                           
  5507                           ;main.c: 510: {
  5508                           ;main.c: 511: switch_count++;
  5509  022D  3001               	movlw	1
  5510  022E  00F2               	movwf	??_INT_RA2
  5511  022F  0872               	movf	??_INT_RA2,w
  5512  0230  07C0               	addwf	_switch_count,f
  5513                           
  5514                           ;main.c: 512: if(switch_count>3)
  5515  0231  3004               	movlw	4
  5516  0232  0240               	subwf	_switch_count,w
  5517  0233  1C03               	skipc
  5518  0234  2A42               	goto	i1l2010
  5519                           
  5520                           ;main.c: 513: {
  5521                           ;main.c: 515: switch_count++;
  5522  0235  3001               	movlw	1
  5523  0236  00F2               	movwf	??_INT_RA2
  5524  0237  0872               	movf	??_INT_RA2,w
  5525  0238  07C0               	addwf	_switch_count,f
  5526                           
  5527                           ;main.c: 516: start_switchpushflag=0;
  5528  0239  01D2               	clrf	_start_switchpushflag
  5529                           
  5530                           ;main.c: 517: if (switch_count>50)
  5531  023A  3033               	movlw	51
  5532  023B  0240               	subwf	_switch_count,w
  5533  023C  1C03               	skipc
  5534  023D  2A42               	goto	i1l2010
  5535                           
  5536                           ;main.c: 518: {
  5537                           ;main.c: 519: switch_count=3;
  5538  023E  3003               	movlw	3
  5539  023F  00F2               	movwf	??_INT_RA2
  5540  0240  0872               	movf	??_INT_RA2,w
  5541  0241  00C0               	movwf	_switch_count
  5542  0242                     i1l2010:	
  5543                           
  5544                           ;main.c: 520: }
  5545                           ;main.c: 522: }
  5546                           ;main.c: 524: }
  5547                           ;main.c: 525: if (start_switchpushflag==0)
  5548  0242  0852               	movf	_start_switchpushflag,w
  5549  0243  1D03               	btfss	3,2
  5550  0244  2A4A               	goto	i1l2016
  5551                           
  5552                           ;main.c: 526: {
  5553                           ;main.c: 527: init_flag=2;
  5554  0245  3002               	movlw	2
  5555  0246  00F2               	movwf	??_INT_RA2
  5556  0247  0872               	movf	??_INT_RA2,w
  5557  0248  00D1               	movwf	_init_flag
  5558                           
  5559                           ;main.c: 528: switch_count=0;
  5560  0249  01C0               	clrf	_switch_count
  5561  024A                     i1l2016:	
  5562                           
  5563                           ;main.c: 530: }
  5564                           ;main.c: 531: if(init_flag==2)
  5565  024A  3002               	movlw	2
  5566  024B  0651               	xorwf	_init_flag,w
  5567  024C  1D03               	btfss	3,2
  5568  024D  2A54               	goto	i1l2022
  5569                           
  5570                           ;main.c: 532: {
  5571                           ;main.c: 533: trigger = 0;
  5572  024E  01C6               	clrf	_trigger
  5573                           
  5574                           ;main.c: 534: switch_count++;
  5575  024F  3001               	movlw	1
  5576  0250  00F2               	movwf	??_INT_RA2
  5577  0251  0872               	movf	??_INT_RA2,w
  5578  0252  07C0               	addwf	_switch_count,f
  5579                           
  5580                           ;main.c: 536: }
  5581  0253  0008               	return
  5582  0254                     i1l2022:	
  5583                           
  5584                           ;main.c: 537: else if(trigger==0 && init_flag ==0 && start_switchpushflag==1 )
  5585  0254  0846               	movf	_trigger,w
  5586  0255  1D03               	btfss	3,2
  5587  0256  0008               	return
  5588  0257  0851               	movf	_init_flag,w
  5589  0258  1D03               	btfss	3,2
  5590  0259  0008               	return
  5591  025A  0352               	decf	_start_switchpushflag,w
  5592  025B  1D03               	btfss	3,2
  5593  025C  0008               	return
  5594                           
  5595                           ;main.c: 539: {
  5596                           ;main.c: 540: trigger = 1;
  5597  025D  01C6               	clrf	_trigger
  5598  025E  0AC6               	incf	_trigger,f
  5599                           
  5600                           ;main.c: 541: T1GCON = 0x42;
  5601  025F  3042               	movlw	66
  5602  0260  0099               	movwf	25	;volatile
  5603                           
  5604                           ;main.c: 542: T1CON = 0x25;
  5605  0261  3025               	movlw	37
  5606  0262  0098               	movwf	24	;volatile
  5607                           
  5608                           ;main.c: 543: TMR1_WriteTimer(0xffff-v_adj_slow);
  5609  0263  0949               	comf	_v_adj_slow,w
  5610  0264  00F2               	movwf	??_INT_RA2
  5611  0265  094A               	comf	_v_adj_slow+1,w
  5612  0266  00F3               	movwf	??_INT_RA2+1
  5613  0267  0AF2               	incf	??_INT_RA2,f
  5614  0268  1903               	skipnz
  5615  0269  0AF3               	incf	??_INT_RA2+1,f
  5616  026A  0872               	movf	??_INT_RA2,w
  5617  026B  3EFF               	addlw	255
  5618  026C  00F0               	movwf	TMR1_WriteTimer@timerVal
  5619  026D  30FF               	movlw	255
  5620  026E  3D73               	addwfc	??_INT_RA2+1,w
  5621  026F  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  5622  0270  2458               	fcall	_TMR1_WriteTimer
  5623                           
  5624                           ;main.c: 545: TMR1_StartTimer();
  5625  0271  251A               	fcall	_TMR1_StartTimer
  5626                           
  5627                           ;main.c: 546: PIE1bits.TMR1IE=1;
  5628  0272  0021               	movlb	1	; select bank1
  5629  0273  1411               	bsf	17,0	;volatile
  5630  0274  0008               	return
  5631  0275                     __end_of_INT_RA2:	
  5632                           
  5633                           	psect	text38
  5634  0520                     __ptext38:	
  5635 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  5636 ;; Defined at:
  5637 ;;		line 144 in file "mcc_generated_files/pin_manager.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		None
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1
  5651 ;;      Params:         0       0       0
  5652 ;;      Locals:         0       0       0
  5653 ;;      Temps:          0       0       0
  5654 ;;      Totals:         0       0       0
  5655 ;;Total ram usage:        0 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_PIN_MANAGER_Initialize
  5661 ;;		_IOCAF2_ISR
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _IOCAF2_DefaultInterruptHandler
  5667  0520                     _IOCAF2_DefaultInterruptHandler:	
  5668                           
  5669                           ;incstack = 0
  5670                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  5671  0520  0008               	return
  5672  0521                     __end_of_IOCAF2_DefaultInterruptHandler:	
  5673                           
  5674                           	psect	text39
  5675  0458                     __ptext39:	
  5676 ;; *************** function _TMR1_WriteTimer *****************
  5677 ;; Defined at:
  5678 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  timerVal        2    0[COMMON] unsigned int 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1
  5692 ;;      Params:         2       0       0
  5693 ;;      Locals:         0       0       0
  5694 ;;      Temps:          0       0       0
  5695 ;;      Totals:         2       0       0
  5696 ;;Total ram usage:        2 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_TMR1_Reload
  5702 ;;		_TMR1_ISR
  5703 ;;		_INT_RA2
  5704 ;;		_tmr1gate_func_init
  5705 ;;		_tmr0reloadcnt
  5706 ;;		_rpm_celiang
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _TMR1_WriteTimer
  5712  0458                     _TMR1_WriteTimer:	
  5713                           
  5714                           ;tmr1.c: 122: if (T1CONbits.nT1SYNC == 1)
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  5718  0458  0020               	movlb	0	; select bank0
  5719  0459  1D18               	btfss	24,2	;volatile
  5720  045A  2C62               	goto	i1l1660
  5721                           
  5722                           ;tmr1.c: 123: {
  5723                           ;tmr1.c: 125: T1CONbits.TMR1ON = 0;
  5724  045B  1018               	bcf	24,0	;volatile
  5725                           
  5726                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
  5727  045C  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  5728  045D  0097               	movwf	23	;volatile
  5729                           
  5730                           ;tmr1.c: 129: TMR1L = timerVal;
  5731  045E  0870               	movf	TMR1_WriteTimer@timerVal,w
  5732  045F  0096               	movwf	22	;volatile
  5733                           
  5734                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
  5735  0460  1418               	bsf	24,0	;volatile
  5736                           
  5737                           ;tmr1.c: 133: }
  5738  0461  0008               	return
  5739  0462                     i1l1660:	
  5740                           
  5741                           ;tmr1.c: 134: else
  5742                           ;tmr1.c: 135: {
  5743                           ;tmr1.c: 137: TMR1H = (timerVal >> 8);
  5744  0462  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  5745  0463  0097               	movwf	23	;volatile
  5746                           
  5747                           ;tmr1.c: 138: TMR1L = timerVal;
  5748  0464  0870               	movf	TMR1_WriteTimer@timerVal,w
  5749  0465  0096               	movwf	22	;volatile
  5750  0466  0008               	return
  5751  0467                     __end_of_TMR1_WriteTimer:	
  5752                           
  5753                           	psect	text40
  5754  051A                     __ptext40:	
  5755 ;; *************** function _TMR1_StartTimer *****************
  5756 ;; Defined at:
  5757 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		None
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1
  5771 ;;      Params:         0       0       0
  5772 ;;      Locals:         0       0       0
  5773 ;;      Temps:          0       0       0
  5774 ;;      Totals:         0       0       0
  5775 ;;Total ram usage:        0 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_INT_RA2
  5781 ;;		_rpm_celiang
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _TMR1_StartTimer
  5787  051A                     _TMR1_StartTimer:	
  5788                           
  5789                           ;tmr1.c: 96: T1CONbits.TMR1ON = 1;
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _TMR1_StartTimer: []
  5793  051A  0020               	movlb	0	; select bank0
  5794  051B  1418               	bsf	24,0	;volatile
  5795  051C  0008               	return
  5796  051D                     __end_of_TMR1_StartTimer:	
  5797  007E                     btemp	set	126	;btemp
  5798  007E                     int$flags	set	126
  5799  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         47
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     10      72
    BANK1            32      2      10

Pointer List with Targets:

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_T2(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_T2(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr1cnt_func_init(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr1cnt_func_init(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr0reloadcnt(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr0reloadcnt(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_RA2(), IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_RA2(), Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_INT_T2
    _INT_T2->_rpm_celiang
    _tmr1gate_func_init->_TMR1_WriteTimer
    _rpm_celiang->_TMR1_ReadTimer
    _TMR1_Reload->_TMR1_WriteTimer
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR0_CallBack->_tmr0reloadcnt
    _tmr0reloadcnt->_TMR1_WriteTimer
    _IOCAF2_ISR->_INT_RA2
    _INT_RA2->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_CallBack->_INT_T2
    _INT_T2->_rpm_celiang

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1392
                                              0 BANK1      2     2      0
         _IOCAF2_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR1_SetInterruptHandler
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     696
                     _ADC_Initialize
                    _CMP1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              9 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     174
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0    4262
                                              6 BANK0      1     1      0
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0    2402
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR2_CallBack                                        0     0      0    2402
                   Absolute function *
                             _INT_T2 *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_T2                                               5     5      0    2402
                                             13 COMMON     1     1      0
                                              2 BANK0      4     4      0
                  _ADC_GetConversion
                            ___lwdiv
                          _led_blink
                        _rpm_celiang
                 _tmr1gate_func_init
 ---------------------------------------------------------------------------------
 (8) _tmr1gate_func_init                                   0     0      0     620
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _rpm_celiang                                          4     2      2    1378
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                     _TMR1_ReadTimer
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_Reload                                          0     0      0     620
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_ReadTimer                                      11     9      2      69
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (8) _led_blink                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0     620
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                  _tmr1cnt_func_init *
 ---------------------------------------------------------------------------------
 (7) _tmr1cnt_func_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     620
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     620
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                      _tmr0reloadcnt *
 ---------------------------------------------------------------------------------
 (7) _tmr0reloadcnt                                        1     1      0     620
                                              2 COMMON     1     1      0
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0     620
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0     620
                   Absolute function *
                            _INT_RA2 *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_RA2                                              2     2      0     620
                                              2 COMMON     2     2      0
                    _TMR1_StartTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     620
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCAF2_SetInterruptHandler
   _SYSTEM_Initialize
     _ADC_Initialize
     _CMP1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR1_SetInterruptHandler
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _INT_RA2 *
         _TMR1_StartTimer
         _TMR1_WriteTimer
       _IOCAF2_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _tmr0reloadcnt *
         _TMR1_WriteTimer
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _tmr1cnt_func_init *
     _TMR1_WriteTimer
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _INT_T2 *
         _ADC_GetConversion
         ___lwdiv
         _led_blink
         _rpm_celiang
           _TMR1_ReadTimer
           _TMR1_Reload
             _TMR1_WriteTimer
           _TMR1_StartTimer
           _TMR1_StopTimer
           _TMR1_WriteTimer
         _tmr1gate_func_init
           _TMR1_WriteTimer
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      60       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      2       A       8       31.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      60       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Feb 26 23:30:03 2021

                       ?_tmr1gate_func_init 0070            __end_of_TMR2_SetInterruptHandler 04E7  
                            _cnt_rpmcapture 0022                                  __CFG_CP$ON 0000  
                                         _i 002E                           ??_CMP1_Initialize 0065  
                              rpm_celiang@a 005E                             _timer0ReloadVal 005D  
                               __CFG_LVP$ON 0000                                         _PR2 001B  
                           _timer1ReloadVal 0057                                         _cnt 0020  
                           _TMR2_Initialize 0436                                __CFG_BORV$LO 0000  
                                       wreg 0009          __end_of_IOCAF2_SetInterruptHandler 04F9  
                _IOCAF2_SetInterruptHandler 04F3                        ??_tmr1gate_func_init 0072  
                                      l2288 02F7                             __end_of_INT_RA2 0275  
                                      _LATA 010C                                        _LATC 010E  
                                      u2257 02EF                                        _TMR0 0015  
                                      _TMR2 001A                                        _WPUA 020C  
                              __CFG_WRT$OFF 0000                                        _main 02C6  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0029  
                ??_TMR1_SetInterruptHandler 0067                               __CFG_MCLRE$ON 0000  
                   __end_of_TMR0_Initialize 0436              ??_TMR0_DefaultInterruptHandler 0070  
            __size_of_OSCILLATOR_Initialize 0006                         __size_of_IOCAF2_ISR 000D  
             __end_of_OSCILLATOR_Initialize 04FF                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 051A  
                                     _T1CON 0018                                       _T2CON 001C  
                           __end_of___lwdiv 03B5                                       i1l116 0403  
                                     i1l500 01F0                                       i1l190 001D  
                                     i1l185 000E                                       i1l187 0013  
                                     i1l195 0024                                       i1l540 0361  
                                     i1l460 017A                                       i1l463 00FD  
                                     i1l561 0297                                       i1l481 0193  
                                     i1l562 029C                                       i1l564 02AA  
                                     i1l565 02AF                                       i1l557 0285  
                                     i1l487 01B2                                       _TMR1H 0017  
                                     _TMR1L 0016                                       _TRISA 008C  
                                     _TRISC 008E           __size_of_TMR0_SetInterruptHandler 0006  
                 ?_TMR0_SetInterruptHandler 0065                            __end_of_TMR0_ISR 0458  
                          __end_of_TMR1_ISR 04CE                            __end_of_TMR2_ISR 0517  
                   __end_of_PIN_MANAGER_IOC 050F                              _WDT_Initialize 050F  
                                     _count 0045                                       _v_adj 0034  
                                     _v_ntc 0032                     __end_of_TMR1_Initialize 0422  
                                     pclath 000A                                       status 0003  
                                     wtemp0 007E                             _TMR1_WriteTimer 0458  
                           __initialization 002A                                __end_of_main 030C  
                              _switch_count 0040                     __end_of_TMR2_Initialize 0447  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
                  _TMR2_SetInterruptHandler 04E1                                      ??_main 00A8  
                         _tmr1cnt_func_init 04FF                                   ??_INT_RA2 0072  
                    __end_of_WDT_Initialize 0513                          ?_tmr1cnt_func_init 0070  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    _ADCON2 009F                                      _ADRESH 009C  
                                    _ADRESL 009B                                      _APFCON 011D  
                                    _ANSELA 018C                                      _ANSELC 018E  
                                    _BORCON 0116                                      _T1GCON 0019  
                                    i1l2010 0242                     TMR1_WriteTimer@timerVal 0070  
                                    i1l2022 0254                                      i1l2016 024A  
                                    i1l2052 0363                                      i1l2046 0359  
                                    i1l2058 036F                                      i1l2148 048C  
                                    i1l1704 029E                                      i1l1712 02B1  
                                    i1l1810 0053                                      i1l1660 0462  
                                    i1l1716 02BB                                      i1l1900 0166  
                                    i1l1750 0339                                      i1l1734 0318  
                                    i1l1902 016B                                      i1l1752 033B  
                                    i1l1920 0195                                      i1l1904 016F  
                                    i1l1832 0085                                      i1l1824 006D  
                                    i1l1906 0171                                      i1l1850 00D5  
                                    i1l1818 0063                                      i1l1780 0389  
                                    i1l1908 0176                                      i1l1844 009D  
                                    u130_25 0396                                      i1l1782 0395  
                                    i1l1766 0347                                      i1l1950 01CC  
                                    i1l1926 019E                                      i1l1918 0191  
                                    i1l1838 008A                                      i1l1854 00E3  
                                    i1l1792 03B0                                      i1l1696 028C  
                                    i1l1936 01B5                                      i1l1880 0131  
                                    i1l1864 00F8                                      i1l1848 00CD  
                                    i1l1938 01B6                                      i1l1954 01D3  
                                    i1l1890 0147                                      i1l1788 03A7  
                                    i1l1948 01CB                                      i1l1876 010B  
                                    u131_25 03A0                                      i1l1966 01EE  
                                    i1l1984 0218                                      i1l1976 0207  
                                    i1l1968 01F2                                      i1l1996 0229  
                                    u132_25 03A8                                      u151_25 013B  
                                    u128_25 038C                                      u226_27 03FE  
                                    _INT_T2 0043                                      _OSCCON 0099  
                       ??_tmr1cnt_func_init 0070                                      _WDTCON 0097  
                            __CFG_PWRTE$OFF 0000                       __end_of_tmr0reloadcnt 0381  
      __end_of_TMR1_DefaultInterruptHandler 051F       __size_of_TMR1_DefaultInterruptHandler 0001  
              _TMR1_DefaultInterruptHandler 051E                     __end_of_TMR1_StartTimer 051D  
                              ?_TMR1_Reload 0070                              __CFG_STVREN$ON 0000  
                                    _ra2sta 0043                                   ??___lwdiv 0074  
                          ?_TMR0_Initialize 0070                                      _v_test 004D  
                 __end_of_tmr1cnt_func_init 0505                             ?_WDT_Initialize 0070  
                  ADC_GetConversion@channel 0073                                ?_rpm_celiang 007B  
                     __end_of_TMR0_CallBack 04BC                        _start_switchpushflag 0052  
  TMR2_SetInterruptHandler@InterruptHandler 0065    TMR1_SetInterruptHandler@InterruptHandler 0065  
  TMR0_SetInterruptHandler@InterruptHandler 0065  IOCAF2_SetInterruptHandler@InterruptHandler 0065  
                          ?_PIN_MANAGER_IOC 0070                     __end_of_TMR1_WriteTimer 0467  
                              ??_IOCAF2_ISR 0074                              _Motor_Rpm_Mode 003A  
                     __end_of_TMR1_CallBack 04B1                            ?_TMR1_Initialize 0070  
                         _SYSTEM_Initialize 0475                     __end_of__initialization 0040  
                     __end_of_TMR2_CallBack 04A6                             _CMP1_Initialize 0505  
                        ?_SYSTEM_Initialize 0070                             _flag_rpmcapture 003E  
                            __pcstackCOMMON 0070                                __pidataBANK0 048F  
                       ??_SYSTEM_Initialize 0068                                   ?_TMR0_ISR 0070  
                                 ?_TMR1_ISR 0070                                   ?_TMR2_ISR 0070  
             ?_TMR1_DefaultInterruptHandler 0070                            ?_TMR2_Initialize 0070  
                        __end_of_IOCAF2_ISR 048F                              _OPTION_REGbits 0095  
                     TMR0_ISR@CountCallBack 0036                            _Motor_run_status 0039  
                   __size_of_TMR1_ReadTimer 001D                 ?_IOCAF2_SetInterruptHandler 0065  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                        __size_of_led_blink 0051                   __end_of_SYSTEM_Initialize 0482  
                                __pbssBANK0 0020                                  __pbssBANK1 00A0  
                                   ?_INT_T2 0070                                     INT_T2@i 007D  
                                __pmaintext 02C6            __end_of_TMR0_SetInterruptHandler 04F3  
                          ?_TMR1_StartTimer 0070                                  ??_TMR0_ISR 0073  
                                ??_TMR1_ISR 0072                                  ??_TMR2_ISR 007E  
                                __pintentry 0004                                     _CM1CON0 0111  
                                   _CM1CON1 0112                                  _flag_blink 003C  
                __size_of_tmr1cnt_func_init 0006                     __size_of_ADC_Initialize 0009  
                   __size_of_TMR1_StopTimer 0003                                     _INT_RA2 021A  
               __size_of_tmr1gate_func_init 000E                     __end_of_CMP1_Initialize 050A  
                          ?_TMR1_WriteTimer 0070                             __size_of_INT_T2 01D7  
                ??_TMR2_SetInterruptHandler 0067                                     _t0_tick 0026  
                         __end_of_led_blink 02C6                                     ___lwdiv 0381  
                                   _cmp1cnt 0024                                     _adjtime 0030  
                      __size_of_TMR1_Reload 0007                                     _flag_L1 0050  
                                   _flag_L2 003D                    TMR1_ReadTimer@readValLow 007A  
                                   __ptext1 0475                                     __ptext2 050F  
                                   __ptext3 0436                                     __ptext4 04E1  
                                   __ptext5 040A                                     __ptext6 04E7  
                                   __ptext7 0422                                     __ptext8 04ED  
                                   __ptext9 03B5                                     _cnt_adc 004B  
            ??_TMR1_DefaultInterruptHandler 0070                   TMR1_ReadTimer@readValHigh 0079  
                                 _T1CONbits 0018                       _OSCILLATOR_Initialize 04F9  
                                 _T2CONbits 001C                                   _CMOUTbits 0115  
         __size_of_TMR1_SetInterruptHandler 0006                                  _v_adj_slow 0049  
                  ??_PIN_MANAGER_Initialize 0067                   ?_TMR1_SetInterruptHandler 0065  
                                 _IOCAFbits 0393                                     _tmr0cnt 002C  
                                 _IOCANbits 0392                                   _IOCAPbits 0391  
                                   _trigger 0046                  __size_of_SYSTEM_Initialize 000D  
                                   clrloop0 04DC                        end_of_initialization 0040  
                      __size_of_rpm_celiang 003E                                     init_ram 04D5  
                                   initloop 04D6                            ??_WDT_Initialize 0065  
                  _TMR0_SetInterruptHandler 04ED                                   _PORTAbits 000C  
                          __CFG_FOSC$INTOSC 0000                              _TMR1_ReadTimer 03D4  
                          ?_CMP1_Initialize 0070                              __end_of_INT_T2 021A  
                                _switchflag 003F        __end_of_TMR2_DefaultInterruptHandler 051E  
     __size_of_TMR2_DefaultInterruptHandler 0001                _TMR2_DefaultInterruptHandler 051D  
                         __size_of_TMR0_ISR 0011                           __size_of_TMR1_ISR 0009  
                         __size_of_TMR2_ISR 0004                              _ADC_Initialize 04BC  
                            _TMR1_StopTimer 0517                      ?_OSCILLATOR_Initialize 0070  
                    __end_of_TMR1_ReadTimer 03F1                         start_initialization 002A  
                  __size_of_TMR0_Initialize 0014             __size_of_PIN_MANAGER_Initialize 001F  
                    __size_of_tmr0reloadcnt 0037                                    ??_INT_T2 0060  
                  __size_of_PIN_MANAGER_IOC 0005      __end_of_IOCAF2_DefaultInterruptHandler 0521  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 0520  
                  __size_of_TMR1_Initialize 0018                      __size_of_TMR0_CallBack 000B  
                    __end_of_ADC_Initialize 04C5                      __end_of_TMR1_StopTimer 051A  
                               __pdataBANK0 0047                           _carbonbrushoutcnt 0041  
             ?_TMR2_DefaultInterruptHandler 0070                               _reloading_val 0047  
                    __size_of_TMR1_CallBack 000B                             ?_TMR1_ReadTimer 0070  
                    __size_of_TMR2_CallBack 000B                                   ___latbits 0000  
                                  ?_INT_RA2 0070                               __pcstackBANK0 005E  
                             __pcstackBANK1 00A8                    __size_of_TMR2_Initialize 0011  
                     _TMR0_InterruptHandler 0059                                   __pnvBANK0 0053  
                          ___lwdiv@dividend 0072                      _PIN_MANAGER_Initialize 03B5  
                             _tmr0reloadcnt 034A            __end_of_TMR1_SetInterruptHandler 04ED  
                                  ?___lwdiv 0070                             ?_ADC_Initialize 0070  
                           ?_TMR1_StopTimer 0070                ??_INTERRUPT_InterruptManager 0064  
                                 _led_blink 0275                    __size_of_TMR1_StartTimer 0003  
                __end_of_tmr1gate_func_init 0475                                   _count_sta 0044  
                         _Tmr0fuctionswitch 004F                            ___lwdiv@quotient 0075  
                                 _init_flag 0051                               _TMR0_CallBack 04B1  
                              _v_adj_filter 00A0                               _TMR1_CallBack 04A6  
                         ??_TMR0_Initialize 0067                                    _LATAbits 010C  
                                  _LATCbits 010E                                   clear_ram0 04DB  
                             _TMR2_CallBack 049B                                    _PIE1bits 0091  
                  __size_of_TMR1_WriteTimer 000F                              ?_tmr0reloadcnt 0070  
       __size_of_INTERRUPT_InterruptManager 0025                  ??_TMR0_SetInterruptHandler 0067  
                                  _PIR1bits 0011                               ??_TMR1_Reload 0072  
                                  _TMR0_ISR 0447                                    _TMR1_ISR 04C5  
                                  _TMR2_ISR 0513                           ??_PIN_MANAGER_IOC 0074  
                         ??_TMR1_Initialize 0067                                  ?_led_blink 0070  
                                _ADCON0bits 009D              ??_TMR2_DefaultInterruptHandler 0070  
         __size_of_TMR2_SetInterruptHandler 0006                   ?_TMR2_SetInterruptHandler 0065  
                             ??_rpm_celiang 007D                            __size_of_INT_RA2 005B  
                            ?_TMR0_CallBack 0070                              ?_TMR1_CallBack 0070  
                         ??_TMR2_Initialize 0067                              ?_TMR2_CallBack 0070  
                         _ADC_GetConversion 03F1                       TMR1_ReadTimer@readVal 0077  
                   ??_OSCILLATOR_Initialize 0065                          ?_ADC_GetConversion 0070  
                          __size_of___lwdiv 0034                    _TMR1_SetInterruptHandler 04E7  
                       __end_of_TMR1_Reload 04D5                       _TMR1_InterruptHandler 0055  
                       ??_ADC_GetConversion 0072                     _IOCAF2_InterruptHandler 005B  
                   INT_T2@last_switch_count 0038                             ___lwdiv@divisor 0070  
                           ___lwdiv@counter 0077                ??_IOCAF2_SetInterruptHandler 0067  
                                  __ptext10 04F3                                    __ptext11 04F9  
                                  __ptext20 030C                                    __ptext12 0505  
                                  __ptext21 0517                                    __ptext13 04BC  
                                _T1GCONbits 0019                                    __ptext30 04FF  
                                  __ptext22 04CE                                    __ptext31 0447  
                                  __ptext23 03D4                                    __ptext15 0513  
                                  __ptext40 051A                                    __ptext32 04B1  
                                  __ptext24 0275                                    __ptext16 049B  
                                  __ptext33 051F                                    __ptext25 0381  
                                  __ptext17 0043                                    __ptext34 034A  
                                  __ptext26 03F1                                    __ptext18 051D  
                                  __ptext35 050A                                    __ptext27 04C5  
                                  __ptext19 0467                                    __ptext36 0482  
                                  __ptext28 04A6                                    __ptext37 021A  
                                  __ptext29 051E                                    __ptext38 0520  
                                  __ptext39 0458                           _Tmr1fuctionswitch 003B  
                         ??_TMR1_StartTimer 0070                                  _IOCAF2_ISR 0482  
                       __end_of_rpm_celiang 034A                               __size_of_main 0046  
                           ??_tmr0reloadcnt 0072        __end_of_TMR0_DefaultInterruptHandler 0520  
     __size_of_TMR0_DefaultInterruptHandler 0001                _TMR0_DefaultInterruptHandler 051F  
                 __end_of_ADC_GetConversion 040A                    __size_of_CMP1_Initialize 0005  
                          ??_TMR1_ReadTimer 0072                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0029                  _INTERRUPT_InterruptManager 0004  
                         ??_TMR1_WriteTimer 0072         __size_of_IOCAF2_SetInterruptHandler 0006  
                               ??_led_blink 0070                                _t1_last_tick 0028  
                                _INTCONbits 000B                             ??_TMR0_CallBack 0073  
                           ??_TMR1_CallBack 0070                     __size_of_WDT_Initialize 0004  
                              _t2_last_tick 002A                                    intlevel1 0000  
                           ??_TMR2_CallBack 007E                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                            ??_ADC_Initialize 0065  
                          ??_TMR1_StopTimer 0070               ?_TMR0_DefaultInterruptHandler 0070  
                               _TMR1_Reload 04CE                                  _OPTION_REG 0095  
                           _TMR0_Initialize 0422                                 _rpm_celiang 030C  
                               ?_IOCAF2_ISR 0070              __end_of_PIN_MANAGER_Initialize 03D4  
                               _overheatcnt 0042                          _tmr1gate_func_init 0467  
                           _PIN_MANAGER_IOC 050A                       _TMR2_InterruptHandler 0053  
                __size_of_ADC_GetConversion 0019                             _TMR1_Initialize 040A  
